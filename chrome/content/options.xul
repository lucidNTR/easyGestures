<?xml version="1.0"?>

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is easyGestures.
   -
   - The Initial Developer of the Original Code is Ons Besbes.
   -
   - Contributor(s): ngdeleito
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://easygestures/skin/actions.css" type="text/css"?>
<!DOCTYPE overlay SYSTEM "chrome://easygestures/locale/easygestures.dtd">

<prefwindow
  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  xmlns:html="http://www.w3.org/1999/xhtml"
  id="eG_optionsWindow"
  title="&options; - easyGestures"
  onkeypress="preventCloseOnEnter(event);"
  persist="lastSelected screenX screenY width height"
  
  onload="avoidMultipleInstances(); initMenuDialog();"
  buttons="accept,cancel,disclosure"
  ondialogdisclosure="window.openDialog('chrome://easygestures/content/tips.xul', '', 'chrome,centerscreen,resizable');">

  <prefpane
    id="generalPane"
    label="&general;"
    image="chrome://easygestures/content/profile.png">
    <preferences>
      <preference id="startupTips" name="extensions.easygestures.general.startupTips" type="bool" />
    </preferences>
    <checkbox preference="startupTips" label="&about.startupTips;" />
    
    <separator orient="horizontal" class="thin" />
    <menuseparator />
    
    <label value="&about.manage;" class="header" />
    <hbox>
      <button disabled="true" label="&about.import;"
              oncommand="importPrefs(); initMenuDialog();" />
      <button disabled="true" label="&about.export;"
              oncommand="saveAllPreferences(this); exportPrefs();" />
      <button label="&about.reset;"
              oncommand="if (confirm('&about.reset;')) { eGPrefs.setDefaultSettings(); initMenuDialog(); }" />
    </hbox>
    
    <separator orient="horizontal" class="thin" />
    <menuseparator />

    <label value="&about.stats;" class="header" />
    <hbox>
      <button label="&about.statsDisplay;"
              oncommand="window.openDialog('chrome://easygestures/content/stats.xul', '', 'chrome,alwaysRaised,centerscreen');" />
      <button label="&about.statsReset;"
              oncommand="if (confirm('&about.statsReset;')) { eGPrefs.initializeStats(); }" />
    </hbox>
  </prefpane>
  
  <prefpane
    id="activationPane"
    label="&activation;"
    image="chrome://easygestures/content/behavior.png">
    <preferences>
      <preference id="showButton" name="extensions.easygestures.activation.showButton" type="int" />
      <preference id="showKey" name="extensions.easygestures.activation.showKey" type="int" />
      <preference id="showAfterDelay" name="extensions.easygestures.activation.showAfterDelay" type="bool" />
      <preference id="showAfterDelayValue" name="extensions.easygestures.activation.showAfterDelayValue" type="int" />
      <preference id="showAltButton" name="extensions.easygestures.activation.showAltButton" type="int" />
      <preference id="suppressKey" name="extensions.easygestures.activation.suppressKey" type="int" />
      <preference id="contextKey" name="extensions.easygestures.activation.contextKey" type="int" />
      <preference id="contextShowAuto" name="extensions.easygestures.activation.contextShowAuto" type="bool" />
    </preferences>
    <label value="&use;" class="header" />
    <hbox align="center" style="margin-left: 1em">
      <menulist id="showButtonMenulist" oncommand="updateLabelAndTextboxFor(this); fireChangeEventOn(this.parentNode.lastElementChild);">
        <menupopup>
          <menuitem label="&use.button.left;" value="0" />
          <menuitem label="&use.button.middle;" value="1" />
          <menuitem label="&use.button.right;" value="2" />
          <menuitem label="&use.button.custom;" />
        </menupopup>
      </menulist>
      <label value="&use.buttoncode;" />
      <textbox preference="showButton" size="2"
        onclick="this.value = event.button; fireChangeEventOn(this);" />
    </hbox>
    <label value="&use.and;" class="header" />
    <radiogroup preference="showKey" style="margin-left: 1em">
      <radio label="&use.noKey;" value="0" />
      <radio label="&use.shift;" value="16" />
      <radio label="&use.ctrl;" value="17" />
    </radiogroup>
    
    <separator orient="horizontal" class="thin" />
    
    <checkbox id="showAfterDelayCheckbox" preference="showAfterDelay"
      label="&use.afterDelay;" oncommand="updateUI();" />
    <hbox align="center" style="margin-left: 1em">
      <label id="showAfterDelayDelayLabel"
        value="&autoscrolling.autoscrollingDelayLabel;" />
      <textbox id="showAfterDelayDelayTextbox" preference="showAfterDelayValue"
        size="3" style="text-align: right" />
      <label value="ms" />
    </hbox>
    
    <separator orient="horizontal" class="thin" />
    <menuseparator />
    
    <label value="&use.alternative;" class="header" />
    <hbox align="center" style="margin-left: 1em">
      <menulist id="showAltButtonMenulist" oncommand="updateLabelAndTextboxFor(this); fireChangeEventOn(this.parentNode.lastElementChild);">
        <menupopup>
          <menuitem label="&use.button.left;" value="0" />
          <menuitem label="&use.button.middle;" value="1" />
          <menuitem label="&use.button.right;" value="2" />
          <menuitem label="&use.button.custom;" />
        </menupopup>
      </menulist>
      <label value="&use.buttoncode;" />
      <textbox preference="showAltButton" size="2"
        onclick="this.value = event.button; fireChangeEventOn(this);" />
    </hbox>
    <label value="&use.also;" />
    
    <separator orient="horizontal" class="thin" />
    <menuseparator />
    
    <label value="&suppress;" class="header" />
    <hbox align="center" style="margin-left: 1em">
      <menulist id="suppressKeyMenulist"
        oncommand="updateLabelAndTextboxFor(this); resetOnDuplicatedKeys(this, this.parentNode.lastElementChild); fireChangeEventOn(this.parentNode.lastElementChild);">
        <menupopup>
          <menuitem label="&use.noKey;" value="0" />
          <menuitem label="&suppress.ins;" value="45" />
          <menuitem label="&suppress.alt;" value="18" />
          <menuitem label="&suppress.ctrl;" value="17" />
          <menuitem label="&suppress.custom;" />
        </menupopup>
      </menulist>
      <label value="&suppress.keycode;" />
      <textbox id="customSupprKeyCode" preference="suppressKey" size="4"
        onkeyup="this.value = event.keyCode; resetOnDuplicatedKeys(this.parentNode.firstElementChild, this); fireChangeEventOn(this);" />
    </hbox>
    
    <separator orient="horizontal" class="thin" />
    <menuseparator />
    
    <label value="&contextmenu;" class="header" />
    <hbox align="center" style="margin-left: 1em">
      <menulist id="contextKeyMenulist"
        oncommand="updateLabelAndTextboxFor(this); resetOnDuplicatedKeys(this, this.parentNode.lastElementChild); fireChangeEventOn(this.parentNode.lastElementChild);">
        <menupopup>
          <menuitem label="&use.noKey;" value="0" />
          <menuitem label="&suppress.ins;" value="45" />
          <menuitem label="&suppress.alt;" value="18" />
          <menuitem label="&suppress.ctrl;" value="17" />
          <menuitem label="&suppress.custom;" />
        </menupopup>
      </menulist>
      <label value="&suppress.keycode;" />
      <textbox id="customContextKeyCode" preference="contextKey" size="4"
        onkeyup="this.value = event.keyCode; resetOnDuplicatedKeys(this.parentNode.firstElementChild, this); fireChangeEventOn(this);" />
    </hbox>
    <checkbox preference="contextShowAuto" label="&contextmenu.showAuto;" />
  </prefpane>
  
  <prefpane
    id="behaviorPane"
    label="&behavior;"
    image="chrome://easygestures/content/behavior.png">
    <preferences>
      <preference id="largeMenu" name="extensions.easygestures.behavior.largeMenu" type="bool" />
      <preference id="noIcons" name="extensions.easygestures.behavior.noIcons" type="bool" />
      <preference id="smallIcons" name="extensions.easygestures.behavior.smallIcons" type="bool" />
      <preference id="menuOpacity" name="extensions.easygestures.behavior.menuOpacity" type="int" />
      <preference id="showTooltips" name="extensions.easygestures.behavior.showTooltips" type="bool" />
      <preference id="tooltipsDelay" name="extensions.easygestures.behavior.tooltipsDelay" type="int" />
      <preference id="moveAuto" name="extensions.easygestures.behavior.moveAuto" type="bool" />
      <preference id="handleLinks" name="extensions.easygestures.behavior.handleLinks" type="bool" />
      <preference id="linksDelay" name="extensions.easygestures.behavior.linksDelay" type="int" />
      <preference id="handleLinksAsOpenLink" name="extensions.easygestures.behavior.handleLinksAsOpenLink" type="bool" />
      <preference id="autoscrollingOn" name="extensions.easygestures.behavior.autoscrollingOn" type="bool" />
      <preference id="autoscrollingDelay" name="extensions.easygestures.behavior.autoscrollingDelay" type="int" />
    </preferences>
    <label value="&extras.menuType;" class="header" />
    <radiogroup id="menuType" preference="largeMenu" oncommand="updateUI();"
      style="margin-left: 1em">
      <radio label="&extras.menu;" value="false" />
      <radio label="&extras.largeMenu;" value="true" />
    </radiogroup>
    
    <separator orient="horizontal" class="thin" />
    <menuseparator />
    
    <label value="&extras.display;" class="header" />
    <vbox style="margin-left: 1em">
      <checkbox preference="noIcons" label="&extras.noIcons;" />
      <checkbox preference="smallIcons" label="&extras.smallIcons;" />
      <hbox align="center">
        <label value="&extras.menuOpacity;" />
        <textbox preference="menuOpacity" type="number" min="0" max="100"
          size="3" />
        <label value="%" />
      </hbox>
    </vbox>
    
    <separator orient="horizontal" class="thin" />
    <menuseparator />
    
    <checkbox id="showTooltipsCheckbox" preference="showTooltips"
      label="&extras.ttip;" oncommand="updateUI();" class="header" />
    <hbox align="center" style="margin-left: 1em">
      <label id="tooltipsDelayLabel" value="&extras.ttipDelayLabel;" />
      <textbox id="tooltipsDelayValue" preference="tooltipsDelay" size="3"
        style="text-align: right" />
      <label id="tooltipsDelayUnit" value="ms" />
    </hbox>
    
    <separator orient="horizontal" class="thin" />
    <menuseparator />
    
    <label value="&move;" class="header" />
    <radiogroup preference="moveAuto" style="margin-left: 1em">
      <radio label="&move.key;" value="false" />
      <radio label="&move.edge;" value="true" />
    </radiogroup>
    
    <separator orient="horizontal" class="thin" />
    <menuseparator />
    
    <checkbox preference="handleLinks" label="&link.through;" class="header" />
    <hbox align="center" style="margin-left: 1em">
      <label id="linksDelayLabel" value="&link.delay;" />
      <textbox preference="linksDelay" size="3" style="text-align: right" />
      <label value="ms" />
    </hbox>
    <hbox style="margin-left: 1em">
      <radiogroup preference="handleLinksAsOpenLink">
        <hbox align="center">
          <radio label="&link.throughAsAction;" value="true" />
          <separator orient="vertical" />
          <label class="text-link" value="&configureAction;" onclick="document.getElementById('eG_optionsWindow').showPane(document.getElementById('customizationsPane')); var tabbox = document.getElementById('customizationsTabboxes'); tabbox.selectedIndex = tabbox.tabs.getIndexOfItem(document.getElementById('otherActionsCustomizationsTab'));" />
        </hbox>
        <radio label="&link.throughAsBrowser;" value="false" />
      </radiogroup>
    </hbox>
    
    <separator orient="horizontal" class="thin" />
    <menuseparator />
    
    <checkbox id="autoscrollingOnCheckbox" preference="autoscrollingOn"
      label="&autoscrolling;" oncommand="updateUI();" class="header" />
    <hbox align="center" style="margin-left: 1em">
      <label id="autoscrollingDelayLabel"
        value="&autoscrolling.autoscrollingDelayLabel;" />
      <textbox id="autoscrollingDelayValue" preference="autoscrollingDelay"
        size="3" style="text-align: right" />
      <label id="autoscrollingDelayUnit" value="ms" />
    </hbox>
  </prefpane>
  
  <prefpane
    id="menusPane"
    label="&menus;"
    image="chrome://easygestures/content/actions.png">
    <preferences>
      <preference id="mainMenu" name="extensions.easygestures.menus.main" type="string" />
      <preference id="mainAlt1Enabled" name="extensions.easygestures.menus.mainAlt1Enabled" type="bool" />
      <preference id="mainAlt1Menu" name="extensions.easygestures.menus.mainAlt1" type="string" />
      <preference id="mainAlt2Enabled" name="extensions.easygestures.menus.mainAlt2Enabled" type="bool" />
      <preference id="mainAlt2Menu" name="extensions.easygestures.menus.mainAlt2" type="string" />
      <preference id="extraMenu" name="extensions.easygestures.menus.extra" type="string" />
      <preference id="extraAlt1Enabled" name="extensions.easygestures.menus.extraAlt1Enabled" type="bool" />
      <preference id="extraAlt1Menu" name="extensions.easygestures.menus.extraAlt1" type="string" />
      <preference id="extraAlt2Enabled" name="extensions.easygestures.menus.extraAlt2Enabled" type="bool" />
      <preference id="extraAlt2Menu" name="extensions.easygestures.menus.extraAlt2" type="string" />
      <preference id="contextImageFirst" name="extensions.easygestures.menus.contextImageFirst" type="bool" />
      <preference id="contextTextboxFirst" name="extensions.easygestures.menus.contextTextboxFirst" type="bool" />
      <preference id="contextLinkMenu" name="extensions.easygestures.menus.contextLink" type="string" />
      <preference id="contextImageMenu" name="extensions.easygestures.menus.contextImage" type="string" />
      <preference id="contextSelectionMenu" name="extensions.easygestures.menus.contextSelection" type="string" />
      <preference id="contextTextboxMenu" name="extensions.easygestures.menus.contextTextbox" type="string" />
    </preferences>
    <tabbox id="actionsTabboxes">
      <tabs>
        <tab label="&actions.main;" />
        <tab label="&actions.extra;" />
        <tab label="&actions.contextual;" />
      </tabs>
      <tabpanels>
        <tabpanel pack="center">
          <tabbox>
            <tabs>
              <tab label="&actions.primary;" />
              <tab label="&actions.alternative; 1" />
              <tab label="&actions.alternative; 2" />
            </tabs>
            <tabpanels>
              <tabpanel>
                <vbox>
                  <checkbox label="&actions.enabled;"
                    style="visibility: hidden" />
                  <vbox id="gr_main" preference-editable="true"
                    preference="mainMenu"
                    onsynctopreference="return preparePreferenceValueForNormalMenu('main');">
                  </vbox>
                </vbox>
              </tabpanel>
              <tabpanel>
                <vbox>
                  <checkbox id="mainAlternative1Checkbox"
                    preference="mainAlt1Enabled" label="&actions.enabled;"
                    oncommand="updateUI();" />
                  <vbox id="gr_mainAlt1" preference-editable="true"
                    preference="mainAlt1Menu"
                    onsynctopreference="return preparePreferenceValueForNormalMenu('mainAlt1');">
                  </vbox>
                </vbox>
              </tabpanel>
              <tabpanel>
                <vbox>
                  <checkbox id="mainAlternative2Checkbox"
                    preference="mainAlt2Enabled" label="&actions.enabled;"
                    oncommand="updateUI();" />
                  <vbox id="gr_mainAlt2" preference-editable="true"
                    preference="mainAlt2Menu"
                    onsynctopreference="return preparePreferenceValueForNormalMenu('mainAlt2');">
                  </vbox>
                </vbox>
              </tabpanel>
            </tabpanels>
          </tabbox>
        </tabpanel>
        <tabpanel pack="center">
          <vbox>
            <hbox align="center">
              <image class="message-icon" style="height: 1.5em; width: auto" />
              <label value="&actions.info;" />
            </hbox>
            <separator orient="horizontal" style="height: 2em" />
            <tabbox>
              <tabs>
                <tab label="&actions.primary;" />
                <tab label="&actions.alternative; 1" />
                <tab label="&actions.alternative; 2" />
              </tabs>
              <tabpanels>
                <tabpanel>
                  <vbox>
                  <checkbox label="&actions.enabled;"
                    style="visibility: hidden" />
                    <vbox id="gr_extra" preference-editable="true"
                      preference="extraMenu"
                      onsynctopreference="return preparePreferenceValueForExtraMenu('extra');">
                    </vbox>
                  </vbox>
                </tabpanel>
                <tabpanel>
                  <vbox>
                    <checkbox id="extraAlternative1Checkbox"
                      preference="extraAlt1Enabled" label="&actions.enabled;"
                      oncommand="updateUI();" />
                    <vbox id="gr_extraAlt1" preference-editable="true"
                      preference="extraAlt1Menu"
                      onsynctopreference="return preparePreferenceValueForExtraMenu('extraAlt1');">
                    </vbox>
                  </vbox>
                </tabpanel>
                <tabpanel>
                  <vbox>
                    <checkbox id="extraAlternative2Checkbox"
                      preference="extraAlt2Enabled" label="&actions.enabled;"
                      oncommand="updateUI();" />
                    <vbox id="gr_extraAlt2" preference-editable="true"
                      preference="extraAlt2Menu"
                      onsynctopreference="return preparePreferenceValueForExtraMenu('extraAlt2');">
                    </vbox>
                  </vbox>
                </tabpanel>
              </tabpanels>
            </tabbox>
          </vbox>
        </tabpanel>
        <tabpanel pack="center">
          <vbox>
            <label value="&contextmenu.order;" class="header" />
            <vbox style="margin-left: 1em">
              <checkbox preference="contextImageFirst" label="&contextmenu.imageFirst;" />
              <checkbox preference="contextTextboxFirst" label="&contextmenu.textboxFirst;" />
            </vbox>
            <separator orient="horizontal" style="height: 2em" />
            <tabbox>
              <tabs>
                <tab label="&contextmenu.link;" />
                <tab label="&contextmenu.image;" />
                <tab label="&contextmenu.selection;" />
                <tab label="&contextmenu.textbox;" />
              </tabs>
              <tabpanels>
                <tabpanel>
                  <vbox id="gr_contextLink" preference-editable="true"
                    preference="contextLinkMenu"
                    onsynctopreference="return preparePreferenceValueForNormalMenu('contextLink');">
                  </vbox>
                </tabpanel>
                <tabpanel>
                  <vbox id="gr_contextImage" preference-editable="true"
                    preference="contextImageMenu"
                    onsynctopreference="return preparePreferenceValueForNormalMenu('contextImage');">
                  </vbox>
                </tabpanel>
                <tabpanel>
                  <vbox id="gr_contextSelection" preference-editable="true"
                    preference="contextSelectionMenu"
                    onsynctopreference="return preparePreferenceValueForNormalMenu('contextSelection');">
                  </vbox>
                </tabpanel>
                <tabpanel>
                  <vbox id="gr_contextTextbox" preference-editable="true"
                    preference="contextTextboxMenu"
                    onsynctopreference="return preparePreferenceValueForNormalMenu('contextTextbox');">
                  </vbox>
                </tabpanel>
              </tabpanels>
            </tabbox>
          </vbox>
        </tabpanel>
      </tabpanels>
    </tabbox>
  </prefpane>
  
  <prefpane
    id="customizationsPane"
    label="&customizations;"
    image="chrome://easygestures/content/customizations.png">
    <preferences>
      <preference id="loadURLin" name="extensions.easygestures.customizations.loadURLin" type="string" />
      <preference id="loadURLScript1" name="extensions.easygestures.customizations.loadURLScript1" type="unichar" />
      <preference id="loadURLScript2" name="extensions.easygestures.customizations.loadURLScript2" type="unichar" />
      <preference id="loadURLScript3" name="extensions.easygestures.customizations.loadURLScript3" type="unichar" />
      <preference id="loadURLScript4" name="extensions.easygestures.customizations.loadURLScript4" type="unichar" />
      <preference id="loadURLScript5" name="extensions.easygestures.customizations.loadURLScript5" type="unichar" />
      <preference id="loadURLScript6" name="extensions.easygestures.customizations.loadURLScript6" type="unichar" />
      <preference id="loadURLScript7" name="extensions.easygestures.customizations.loadURLScript7" type="unichar" />
      <preference id="loadURLScript8" name="extensions.easygestures.customizations.loadURLScript8" type="unichar" />
      <preference id="loadURLScript9" name="extensions.easygestures.customizations.loadURLScript9" type="unichar" />
      <preference id="loadURLScript10" name="extensions.easygestures.customizations.loadURLScript10" type="unichar" />
      <preference id="loadURLScript11" name="extensions.easygestures.customizations.loadURLScript11" type="unichar" />
      <preference id="loadURLScript12" name="extensions.easygestures.customizations.loadURLScript12" type="unichar" />
      <preference id="loadURLScript13" name="extensions.easygestures.customizations.loadURLScript13" type="unichar" />
      <preference id="loadURLScript14" name="extensions.easygestures.customizations.loadURLScript14" type="unichar" />
      <preference id="loadURLScript15" name="extensions.easygestures.customizations.loadURLScript15" type="unichar" />
      <preference id="loadURLScript16" name="extensions.easygestures.customizations.loadURLScript16" type="unichar" />
      <preference id="loadURLScript17" name="extensions.easygestures.customizations.loadURLScript17" type="unichar" />
      <preference id="loadURLScript18" name="extensions.easygestures.customizations.loadURLScript18" type="unichar" />
      <preference id="loadURLScript19" name="extensions.easygestures.customizations.loadURLScript19" type="unichar" />
      <preference id="loadURLScript20" name="extensions.easygestures.customizations.loadURLScript20" type="unichar" />
      <preference id="openLink" name="extensions.easygestures.customizations.openLink" type="string" />
      <preference id="closeBrowserOnLastTab" name="extensions.easygestures.customizations.closeBrowserOnLastTab" type="bool" />
    </preferences>
    <tabbox id="customizationsTabboxes">
      <tabs>
        <tab label="&customizations.loadURLScriptActions;" />
        <tab label="&customizations.otherActions;" id="otherActionsCustomizationsTab" />
      </tabs>
      <tabpanels>
        <tabpanel>
          <vbox flex="1" style="height: 480px; overflow: auto">
            <hbox align="start">
              <image class="message-icon" style="height: 1.5em; width: auto" />
              <vbox>
                <label value="&customizations.infoActions;" />
                <label value="&customizations.infoPlaceholders;" />
              </vbox>
            </hbox>
            
            <separator orient="horizontal" style="height: 2em" />
            
            <label value="&urlscript.load;" class="header" />
            <hbox>
              <menulist preference="loadURLin" style="margin-left: 1em">
                <menupopup>
                  <menuitem label="&urlscript.curTab;" value="curTab" />
                  <menuitem label="&urlscript.newTab;" value="newTab" />
                  <menuitem label="&urlscript.newWindow;" value="newWindow" />
                </menupopup>
              </menulist>
            </hbox>
            
            <separator orient="horizontal" class="thin" />
            <menuseparator />
            <vbox id="gr_loadURLScript1" preference-editable="true"
              preference="loadURLScript1"
              onsynctopreference="return preparePreferenceValueForLoadURLScript(1);">
            </vbox>
            <separator orient="horizontal" class="thin" />
            <menuseparator />
            <vbox id="gr_loadURLScript2" preference-editable="true"
              preference="loadURLScript2"
              onsynctopreference="return preparePreferenceValueForLoadURLScript(2);">
            </vbox>
            <separator orient="horizontal" class="thin" />
            <menuseparator />
            <vbox id="gr_loadURLScript3" preference-editable="true"
              preference="loadURLScript3"
              onsynctopreference="return preparePreferenceValueForLoadURLScript(3);">
            </vbox>
            <separator orient="horizontal" class="thin" />
            <menuseparator />
            <vbox id="gr_loadURLScript4" preference-editable="true"
              preference="loadURLScript4"
              onsynctopreference="return preparePreferenceValueForLoadURLScript(4);">
            </vbox>
            <vbox id="gr_loadURLScript5" preference-editable="true"
              preference="loadURLScript5"
              onsynctopreference="return preparePreferenceValueForLoadURLScript(5);">
            </vbox>
            <separator orient="horizontal" class="thin" />
            <menuseparator />
            <vbox id="gr_loadURLScript6" preference-editable="true"
              preference="loadURLScript6"
              onsynctopreference="return preparePreferenceValueForLoadURLScript(6);">
            </vbox>
            <separator orient="horizontal" class="thin" />
            <menuseparator />
            <vbox id="gr_loadURLScript7" preference-editable="true"
              preference="loadURLScript7"
              onsynctopreference="return preparePreferenceValueForLoadURLScript(7);">
            </vbox>
            <separator orient="horizontal" class="thin" />
            <menuseparator />
            <vbox id="gr_loadURLScript8" preference-editable="true"
              preference="loadURLScript8"
              onsynctopreference="return preparePreferenceValueForLoadURLScript(8);">
            </vbox>
            <separator orient="horizontal" class="thin" />
            <menuseparator />
            <vbox id="gr_loadURLScript9" preference-editable="true"
              preference="loadURLScript9"
              onsynctopreference="return preparePreferenceValueForLoadURLScript(9);">
            </vbox>
            <separator orient="horizontal" class="thin" />
            <menuseparator />
            <vbox id="gr_loadURLScript10" preference-editable="true"
              preference="loadURLScript10"
              onsynctopreference="return preparePreferenceValueForLoadURLScript(10);">
            </vbox>
            <separator orient="horizontal" class="thin" />
            <menuseparator />
            <vbox id="gr_loadURLScript11" preference-editable="true"
              preference="loadURLScript11"
              onsynctopreference="return preparePreferenceValueForLoadURLScript(11);">
            </vbox>
            <separator orient="horizontal" class="thin" />
            <menuseparator />
            <vbox id="gr_loadURLScript12" preference-editable="true"
              preference="loadURLScript12"
              onsynctopreference="return preparePreferenceValueForLoadURLScript(12);">
            </vbox>
            <separator orient="horizontal" class="thin" />
            <menuseparator />
            <vbox id="gr_loadURLScript13" preference-editable="true"
              preference="loadURLScript13"
              onsynctopreference="return preparePreferenceValueForLoadURLScript(13);">
            </vbox>
            <separator orient="horizontal" class="thin" />
            <menuseparator />
            <vbox id="gr_loadURLScript14" preference-editable="true"
              preference="loadURLScript14"
              onsynctopreference="return preparePreferenceValueForLoadURLScript(14);">
            </vbox>
            <separator orient="horizontal" class="thin" />
            <menuseparator />
            <vbox id="gr_loadURLScript15" preference-editable="true"
              preference="loadURLScript15"
              onsynctopreference="return preparePreferenceValueForLoadURLScript(15);">
            </vbox>
            <separator orient="horizontal" class="thin" />
            <menuseparator />
            <vbox id="gr_loadURLScript16" preference-editable="true"
              preference="loadURLScript16"
              onsynctopreference="return preparePreferenceValueForLoadURLScript(16);">
            </vbox>
            <separator orient="horizontal" class="thin" />
            <menuseparator />
            <vbox id="gr_loadURLScript17" preference-editable="true"
              preference="loadURLScript17"
              onsynctopreference="return preparePreferenceValueForLoadURLScript(17);">
            </vbox>
            <separator orient="horizontal" class="thin" />
            <menuseparator />
            <vbox id="gr_loadURLScript18" preference-editable="true"
              preference="loadURLScript18"
              onsynctopreference="return preparePreferenceValueForLoadURLScript(18);">
            </vbox>
            <separator orient="horizontal" class="thin" />
            <menuseparator />
            <vbox id="gr_loadURLScript19" preference-editable="true"
              preference="loadURLScript19"
              onsynctopreference="return preparePreferenceValueForLoadURLScript(19);">
            </vbox>
            <separator orient="horizontal" class="thin" />
            <menuseparator />
            <vbox id="gr_loadURLScript20" preference-editable="true"
              preference="loadURLScript20"
              onsynctopreference="return preparePreferenceValueForLoadURLScript(20);">
            </vbox>
          </vbox>
        </tabpanel>
        <tabpanel>
          <vbox flex="1">
            <hbox align="center">
              <image class="message-icon" style="height: 1.5em; width: auto" />
              <label value="&customizations.infoActions;" />
            </hbox>
            
            <separator orient="horizontal" style="height: 2em" />
            
            <hbox align="center">
              <image class="small_openLink" />
              <label value="&link;" class="header" />
            </hbox>
            <radiogroup preference="openLink" oncommand="updateUI();"
              style="margin-left: 1em">
              <radio label="&link.curTab;" value="curTab" />
              <radio label="&link.newTab;" value="newTab" />
              <radio label="&link.newWindow;" value="newWindow" />
            </radiogroup>
            
            <separator orient="horizontal" class="thin" />
            <menuseparator />
            
            <hbox align="center">
              <image class="small_closeTab" />
              <label value="&closeTab;" class="header" />
            </hbox>
            <checkbox preference="closeBrowserOnLastTab"
              label="&closeTab.closeBrowserOnLastTab;"
              style="margin-left: 1em" />
          </vbox>
        </tabpanel>
      </tabpanels>
    </tabbox>
  </prefpane>
  
  <hbox flex="1" pack="end">
    <resizer dir="bottomend" type="window"></resizer>
  </hbox>
  
  <script type="application/x-javascript" src="chrome://global/content/globalOverlay.js" />
  <script type="application/x-javascript" src="chrome://global/content/menu.js" />
  <script type="application/x-javascript" src="chrome://easygestures/content/integration.js" />

  <script type="application/x-javascript">
    Components.utils.import('resource://gre/modules/Services.jsm');
  </script>
  <!-- getting access to eGPrefs -->
  <script type="application/javascript;version=1.7" src="chrome://easygestures/content/preferences.js" />
  
  <script type="application/x-javascript">
    var eG_duplicateKeyMessage = "&duplicatekey.warning;";
    var eG_faviconNotFound = "&urlscript.faviconNotFound;";
    var loadURLScriptIndex = 51;
    
    //*************************************************************
    // variables needed in createActionsPopupList() function
    //*************************************************************
    
    var eG_PopupLabels = new Array(
      "&func.empty;", "&func.more;", "&func.firstPage;", "&func.lastPage;",
      "&func.backSite;", "&func.forwardSite;", "&func.back;", "&func.forward;",
      "&func.reload;", "&func.up;", "&func.root;", "&func.pageTop;",
      "&func.pageBottom;", "&func.autoscrolling;", "&func.newTab;",
      "&func.duplicateTab;", "&func.prevTab;", "&func.nextTab;",
      "&func.closeTab;", "&func.closeOtherTabs;", "&func.undoCloseTab;",
      "&func.newWindow;", "&func.duplicateWindow;", "&func.closeOtherWindows;",
      "&func.quit;", "&func.minimizeWindow;", "&func.fullscreen;",
      "&func.openLink;", "&func.openLinkNewWindow;", "&func.copyLink;",
      "&func.sendLink;", "&func.copyImageLocation;", "&func.saveLinkAs;",
      "&func.saveImageAs;", "&func.savePageAs;", "&func.hideImages;",
      "&func.copyImage;", "&func.homepage;", "&func.dailyReadings;",
      "&func.searchWeb;", "&func.restart;", "&func.empty;", "&func.empty;",
      "&func.empty;", "&func.empty;", "&func.empty;", "&func.empty;",
      "&func.empty;", "&func.empty;", "&func.empty;", "&func.empty;",
      "&func.loadURLScript1;", "&func.loadURLScript2;", "&func.loadURLScript3;",
      "&func.loadURLScript4;", "&func.loadURLScript5;", "&func.loadURLScript6;",
      "&func.loadURLScript7;", "&func.loadURLScript8;", "&func.loadURLScript9;",
      "&func.loadURLScript10;", "&func.loadURLScript11;",
      "&func.loadURLScript12;", "&func.loadURLScript13;",
      "&func.loadURLScript14;", "&func.loadURLScript15;",
      "&func.loadURLScript16;", "&func.loadURLScript17;",
      "&func.loadURLScript18;", "&func.loadURLScript19;",
      "&func.loadURLScript20;", "&func.markVisitedLinks;",
      "&func.bookmarkThisLink;", "&func.bookmarkPage;",
      "&func.bookmarkOpenTabs;", "&func.bookmarks;", "&func.bookmarksToolbar;",
      "&func.history;", "&func.viewPageSource;", "&func.viewPageInfo;",
      "&func.showOnlyThisFrame;", "&func.properties;", "&func.printPage;",
      "&func.focusLocationBar;", "&func.newPrivateWindow;", "&func.cut;",
      "&func.copy;", "&func.paste;", "&func.undo;", "&func.selectAll;",
      "&func.toggleFindBar;", "&func.zoomIn;", "&func.zoomOut;",
      "&func.zoomReset;"
    );
    
    var eG_PopupImages = new Array(
      "empty", "more", "firstPage", "lastPage", "backSite", "forwardSite",
      "back", "forward", "reload", "up", "root", "pageTop", "pageBottom",
      "autoscrolling", "newTab", "duplicateTab", "prevTab", "nextTab",
      "closeTab", "closeOtherTabs", "undoCloseTab", "newWindow",
      "duplicateWindow", "closeOtherWindows", "quit", "minimizeWindow",
      "fullscreen", "openLink", "openLinkNewWindow", "copyLink", "sendLink",
      "copyImageLocation", "saveLinkAs", "saveImageAs", "savePageAs",
      "hideImages", "copyImage", "homepage", "dailyReadings", "searchWeb",
      "restart", "empty", "empty", "empty", "empty", "empty", "empty", "empty",
      "empty", "empty", "empty", "loadURLScript1", "loadURLScript2",
      "loadURLScript3", "loadURLScript4", "loadURLScript5", "loadURLScript6",
      "loadURLScript7", "loadURLScript8", "loadURLScript9", "loadURLScript10",
      "loadURLScript11", "loadURLScript12", "loadURLScript13",
      "loadURLScript14", "loadURLScript15", "loadURLScript16",
      "loadURLScript17", "loadURLScript18", "loadURLScript19",
      "loadURLScript20", "markVisitedLinks", "bookmarkThisLink", "bookmarkPage",
      "bookmarkOpenTabs", "bookmarks", "bookmarksToolbar", "history",
      "viewPageSource", "viewPageInfo", "showOnlyThisFrame", "properties",
      "printPage", "focusLocationBar", "newPrivateWindow", "cut", "copy",
      "paste", "undo", "selectAll", "toggleFindBar", "zoomIn", "zoomOut",
      "zoomReset"
    );
    
    function setLabels() {
      for (var i=1; i &lt;= 20; i++) {
        // loadURLScript 1 to 20
        document.getElementById("loadURLScript_Label"+i).value= (document.getElementById("loadURLScript_type"+i).selectedItem==document.getElementById("Script"+i))?"&urlscript.code;":"&urlscript.host;";
      }
    }
    
    function createLoadURLScriptForCustomization() {
      for (var i=1; i &lt;= 20; i++) {
        // loadURLScript 1 to 20
        var groupbox = document.getElementById("gr_loadURLScript" + i);
        
        // empty groupbox if needed first
        if (groupbox.hasChildNodes()) {
          while (groupbox.lastChild != null) {
            groupbox.removeChild(groupbox.lastChild);
          }
        }
        
        //////////////////////////////////////////////////////////
        // header
        //////////////////////////////////////////////////////////
        
        var titleNode = document.createElement("hbox");
        titleNode.setAttribute("align", "center");
        
        var image = document.createElement("image");
        image.setAttribute("id", "loadURLScriptImg");
        image.setAttribute("class", "small_loadURLScript" + i);
        titleNode.appendChild(image);
        
        var label = document.createElement("label");
        label.setAttribute("value", "&urlscript.url;/&urlscript.script; " + i);
        label.setAttribute("style", "font-weight: bold;");
        titleNode.appendChild(label);
        
        var hbox = document.createElement("hbox");
        hbox.setAttribute("id", "loadURLScriptDisplay" + i);
        hbox.setAttribute("align", "center");
        titleNode.appendChild(hbox);
        
        label = document.createElement("label");
        label.setAttribute("value", " - ");
        hbox.appendChild(label);
        
        image = document.createElement("image");
        image.setAttribute("id", "loadURLScript_newIcon" + i);
        image.setAttribute("src", "");
        image.setAttribute("maxwidth", "20");
        image.setAttribute("maxheight", "20");
        hbox.appendChild(image);
        
        groupbox.appendChild(titleNode);
        
        var separator = document.createElement("separator");
        separator.setAttribute("class", "thin");
        groupbox.appendChild(separator);
        
        //////////////////////////////////////////////////////////
        // options
        //////////////////////////////////////////////////////////
        
        hbox = document.createElement("hbox");
        hbox.setAttribute("flex", "1");
        groupbox.appendChild(hbox);
        
        var vbox = document.createElement("vbox");
        hbox.appendChild(vbox);
        
        var spacer = document.createElement("spacer");
        spacer.setAttribute("height", "3");
        vbox.appendChild(spacer);
        
        label = document.createElement("label");
        label.setAttribute("value", "&urlscript.name;");
        vbox.appendChild(label);
        
        spacer = document.createElement("spacer");
        spacer.setAttribute("height", "10");
        vbox.appendChild(spacer);
        
        label = document.createElement("label");
        label.setAttribute("id", "loadURLScript_Label" + i);
        label.setAttribute("value", "");
        vbox.appendChild(label);
        
        vbox = document.createElement("vbox");
        vbox.setAttribute("flex", "1");
        hbox.appendChild(vbox);
        
        hbox = document.createElement("hbox");
        vbox.appendChild(hbox);
        
        var textbox = document.createElement("textbox");
        textbox.setAttribute("id", "loadURLScript_name" + i);
        textbox.setAttribute("onchange", "updateOtherLabels(" + (loadURLScriptIndex+i-1) + ", this.value); fireChangeEventOnLoadURLScript(" + i + ");");
        textbox.setAttribute("size", "21");
        textbox.setAttribute("maxlength", "20");
        hbox.appendChild(textbox);
        
        var radiogroup = document.createElement("radiogroup");
        radiogroup.setAttribute("id", "loadURLScript_type" + i);
        radiogroup.setAttribute("orient", "horizontal");
        radiogroup.setAttribute("oncommand", "updateUI(); fireChangeEventOnLoadURLScript(" + i + ");");
        hbox.appendChild(radiogroup);
        
        var radio = document.createElement("radio");
        radio.setAttribute("id", "URL" + i);
        radio.setAttribute("label", "&urlscript.url;");
        radiogroup.appendChild(radio);
        
        radio = document.createElement("radio");
        radio.setAttribute("id", "Script" + i);
        radio.setAttribute("label", "&urlscript.script;");
        radiogroup.appendChild(radio);
        
        var stack = document.createElement("stack");
        vbox.appendChild(stack);
        
        textbox = document.createElement("textbox");
        textbox.setAttribute("id", "loadURLScript_host" + i);
        textbox.setAttribute("size", "30");
        textbox.setAttribute("onchange", "if (document.getElementById('loadURLScript_faviconCheck"+i+"').checked) retrieveFavicon(this.value,"+i+"); fireChangeEventOnLoadURLScript(" + i + ");");
        stack.appendChild(textbox);
        
        textbox = document.createElement("textbox");
        textbox.setAttribute("id", "loadURLScript_code" + i);
        textbox.setAttribute("size", "30");
        textbox.setAttribute("multiline", "true");
        textbox.setAttribute("rows", "6");
        textbox.setAttribute("onchange", "fireChangeEventOnLoadURLScript(" + i + ");");
        stack.appendChild(textbox);
        
        separator = document.createElement("separator");
        separator.setAttribute("class", "thin");
        vbox.appendChild(separator);
        
        hbox = document.createElement("hbox");
        hbox.setAttribute("align", "center");
        vbox.appendChild(hbox);
        
        var checkbox = document.createElement("checkbox");
        checkbox.setAttribute("id", "loadURLScript_faviconCheck" + i);
        checkbox.setAttribute("label", "&urlscript.icon;");
        checkbox.setAttribute("oncommand", "if (this.checked) {retrieveFavicon(document.getElementById('loadURLScript_host"+i+"').value,"+i+"); document.getElementById('loadURLScript_newIconCheck"+i+"').checked= false;} updateUI(); fireChangeEventOnLoadURLScript(" + i + ");");
        hbox.appendChild(checkbox);
        
        checkbox = document.createElement("checkbox");
        checkbox.setAttribute("id", "loadURLScript_newIconCheck" + i);
        checkbox.setAttribute("label", "&changeIcon;");
        checkbox.setAttribute("oncommand","if (this.checked) document.getElementById('loadURLScript_faviconCheck"+i+"').checked= false; updateUI(); fireChangeEventOnLoadURLScript(" + i + ");");
        hbox.appendChild(checkbox);
        
        image = document.createElement("image");
        image.setAttribute("src", "chrome://easygestures/content/browse.png");
        image.setAttribute("onclick", "if ( document.getElementById('loadURLScript_newIconCheck"+i+"').checked) retrieveCustomIconFile('loadURLScript',"+i+"); fireChangeEventOnLoadURLScript(" + i + ");");
        hbox.appendChild(image);
        
        readLoadURLScriptPreference(i);
      }
    }
    
    function createActionsMenulistWithSectorID(name, sectorNumber) {
      var hbox = document.createElement("hbox");
      hbox.setAttribute("pack", "center");
      
      var menulist = document.createElement("menulist");
      menulist.setAttribute("id", name + sectorNumber);
      menulist.setAttribute("editable", "false");
      menulist.setAttribute("width", "150");
      menulist.setAttribute("crop", "end");
      menulist.setAttribute("sizetopopup", "false");
      menulist.setAttribute("actionID", "");
      menulist.setAttribute("oncommand", "updateUI(); updateOtherLabels(this.getAttribute('actionID'), this.label); fireChangeEventOnActionsGroup('" + name + "');");
      menulist.setAttribute("onmousedown", "attachMenupopup(this);");

      hbox.appendChild(menulist);
      return hbox;
    }
    
    function createActions() {
      var boxes = new Array(
        "main", "mainAlt1", "mainAlt2", "extra", "extraAlt1", "extraAlt2",
        "contextLink", "contextImage", "contextSelection", "contextTextbox"
      );
      
      for (var i=0; i &lt; boxes.length; i++) {
        var box = document.getElementById("gr_" + boxes[i]);
        
        // empty box if needed first
        if (box.hasChildNodes()) {
          while (box.lastChild != null) {
            box.removeChild(box.lastChild);
          }
        }
        
        // sector 0
        box.appendChild(createActionsMenulistWithSectorID(boxes[i], "Sector0"));
        
        // sectors 9 and 1
        var hbox = document.createElement("hbox");
        hbox.setAttribute("pack", "center");
        
        hbox.appendChild(createActionsMenulistWithSectorID(boxes[i], "Sector9"));
        
        var spacer = document.createElement("spacer");
        spacer.setAttribute("height", "0");
        spacer.setAttribute("width", "11px");
        hbox.appendChild(spacer);
        
        hbox.appendChild(createActionsMenulistWithSectorID(boxes[i], "Sector1"));
        box.appendChild(hbox);
        
        // sectors 8,7 and 2,3
        hbox = document.createElement("hbox");
        hbox.setAttribute("pack", "center");
        box.appendChild(hbox);
        
        var vbox = document.createElement("vbox");
        vbox.setAttribute("pack", "center");
        hbox.appendChild(vbox);
        
        vbox.appendChild(createActionsMenulistWithSectorID(boxes[i], "Sector8"));
        
        if (!boxes[i].startsWith("extra")) {
          vbox.appendChild(createActionsMenulistWithSectorID(boxes[i], "Sector7"));
        }
        
        ///////////////////////////////
        vbox = document.createElement("vbox");
        hbox.appendChild(vbox);
        
        spacer = document.createElement("spacer");
        spacer.setAttribute("flex", "1");
        vbox.appendChild(spacer);
        
        var image = document.createElement("image");
        image.setAttribute("id", boxes[i]+"Image");
        if (!boxes[i].startsWith("extra")) {
          image.setAttribute("src", "mainMenu.png");
        }
        else {
          image.setAttribute("src", "extraMenu.png");
        }
        image.setAttribute("width", "41");
        image.setAttribute("height", "41");
        vbox.appendChild(image);
        
        spacer = document.createElement("spacer");
        spacer.setAttribute("flex", "1");
        vbox.appendChild(spacer);
        ///////////////////////////////
        
        vbox = document.createElement("vbox");
        vbox.setAttribute("pack", "center");
        hbox.appendChild(vbox);
        
        vbox.appendChild(createActionsMenulistWithSectorID(boxes[i], "Sector2"));
        
        if (!boxes[i].startsWith("extra")) {
          vbox.appendChild(createActionsMenulistWithSectorID(boxes[i], "Sector3"));
        }
        
        if (!boxes[i].startsWith("extra")) {
          // sectors 6 and 4
          hbox = document.createElement("hbox");
          hbox.setAttribute("pack", "center");
          
          hbox.appendChild(createActionsMenulistWithSectorID(boxes[i], "Sector6"));
          
          spacer = document.createElement("spacer");
          spacer.setAttribute("height", "0");
          spacer.setAttribute("width", "11px");
          hbox.appendChild(spacer);
          
          hbox.appendChild(createActionsMenulistWithSectorID(boxes[i], "Sector4"));
          box.appendChild(hbox);
          
          // sector 5
          box.appendChild(createActionsMenulistWithSectorID(boxes[i], "Sector5"));
        }
        
        readActionsGroupPreference(boxes[i]);
      }
    }
  </script>
  
  <script type="application/x-javascript">
    //<![CDATA[
    
    var eG_prefs = Components.classes["@mozilla.org/preferences-service;1"].getService(Components.interfaces.nsIPrefService).getBranch("extensions.easygestures.");
    var eG_actionsPopupList;
    
    function retrieveFavicon(url, actionNumber) {
      if (url != "") {
        if (url.match(/\:\/\//i) == null) {
          url = "http://" + url;
        }
        
        var faviconService = Components.classes["@mozilla.org/browser/favicon-service;1"]
                                       .getService(Components.interfaces.mozIAsyncFavicons);
        var ios = Components.classes["@mozilla.org/network/io-service;1"]
                            .getService(Components.interfaces.nsIIOService);
        var uri = ios.newURI(url, null, null).prePath;
        
        faviconService.getFaviconURLForPage(ios.newURI(uri, null, null), function(aURI) {
          if (aURI != null && aURI != "") {
            document.getElementById("loadURLScript_newIcon" + actionNumber).src = aURI.spec;
          }
          else {
            document.getElementById("loadURLScript_newIcon" + actionNumber).src = "";
            document.getElementById("loadURLScriptDisplay" + actionNumber).collapsed = true;
            document.getElementById("loadURLScript_faviconCheck" + actionNumber).checked = false;
          }
        });
      }
    }
    
    function retrieveCustomIconFile(action, actionNumber) {
      var fp = Components.classes["@mozilla.org/filepicker;1"]
                         .createInstance(Components.interfaces.nsIFilePicker);
      fp.init(window, null, Components.interfaces.nsIFilePicker.modeOpen);
      fp.appendFilters(Components.interfaces.nsIFilePicker.filterImages);
      
      var returnValue = fp.show();
      if (returnValue == Components.interfaces.nsIFilePicker.returnOK) {
        var img = document.getElementById(action + "_newIcon" + actionNumber);
        img.src = "file://" + fp.file.path;
      }
    }
    
    function preventCloseOnEnter(event) {
      if (event.keyCode == 13 && event.target.nodeName == "textbox") {
        if (!event.target.hasAttribute("multiline")) {
          event.preventDefault();
          event.target.parentNode.focus();
        }
      }
    }
    
    function createActionsPopupList() {
      var popupNode = document.createElement("menupopup");
      popupNode.setAttribute("maxheight", "500px");
      
      for (var i=0; i<eG_PopupLabels.length; i++) {
        if (i==1 || i==2 || i==14 || i==21 || i==27 || i==37 || i==71 || i==85) {
          var itemNode = document.createElement("menuseparator");
          popupNode.appendChild(itemNode);
        }
        
        var itemNode = document.createElement("menuitem");
        var imageNode = document.createElement("image");
        var subItemNode = document.createElement("label");
        
        itemNode.appendChild(imageNode);
        itemNode.appendChild(subItemNode);
        
        itemNode.setAttribute("oncommand", "actionClick(this," + i + "); updateUI();");
        itemNode.setAttribute("crop", "end");
        itemNode.setAttribute("label", eG_PopupLabels[i]);
        itemNode.style.paddingRight = "20px";
        imageNode.setAttribute("class", "small_" + eG_PopupImages[i]);
        
        subItemNode.setAttribute("value", eG_PopupLabels[i]);
        popupNode.appendChild(itemNode);
      }
      
      return popupNode;
    }
    
    function actionClick(item, actionNumber) {
      item.parentNode.parentNode.setAttribute("actionID", actionNumber);
      if (actionNumber == 0) {
        item.parentNode.parentNode.setAttribute("label", "");
      }
      
      if (item.firstChild.getAttribute("class").search("loadURLScript") != -1) {
        var n = item.firstChild.getAttribute("class").replace(/([^0-9])+/g,"");
        var label = document.getElementById("loadURLScript_name" + n).value;
        if (label === "") {
          label = eG_PopupLabels[actionNumber];
        }
        item.parentNode.parentNode.setAttribute("label", label);
      }
    }
    
    function attachMenupopup(menulist) {
      if (menulist.firstChild != null) {
        return;
      }

      var clonedMenupopup = eG_actionsPopupList.cloneNode(true);
      menulist.appendChild(clonedMenupopup);
      clonedMenupopup.boxObject.firstChild.setAttribute("style", "overflow-x:hidden;"); // boxObject does not exist before menupopup is shown
      
      if (clonedMenupopup.parentNode.id.search("Sector0") == -1) {
        // remove more action
        clonedMenupopup.removeChild(clonedMenupopup.childNodes[1]);
        clonedMenupopup.removeChild(clonedMenupopup.childNodes[1]);
      }
    }
    
    function browse(textboxid) {
      var fp = Components.classes["@mozilla.org/filepicker;1"].createInstance(Components.interfaces.nsIFilePicker);
      fp.init(window, 'easyGestures', Components.interfaces.nsIFilePicker.modeOpen);
      //fp.appendFilter("Applications(*.exe,*.bat)","*.exe;*.bat");
      fp.appendFilters(Components.interfaces.nsIFilePicker.filterAll);
      
      var ret = fp.show();
      if (ret == Components.interfaces.nsIFilePicker.returnOK) {
        var textbox = document.getElementById(textboxid);
        textbox.value = fp.file.path;
      }
    }
    
    function exportPrefs() {
      var fp = Components.classes["@mozilla.org/filepicker;1"].createInstance(Components.interfaces.nsIFilePicker);
      fp.init(window, 'easyGestures', Components.interfaces.nsIFilePicker.modeSave);
      fp.appendFilter("Preferences (*.ege)","*.ege");
      var ret = fp.show();
      if (ret == Components.interfaces.nsIFilePicker.returnOK || ret == Components.interfaces.nsIFilePicker.returnReplace ) {
        //create file
        var file = Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsILocalFile);
        var filePath = fp.file.path;
        if (filePath.substring(filePath.length-4,filePath.length)!=".ege")
          filePath = filePath + ".ege";
        file.initWithPath(filePath);
        if (file.exists() == false) {
          file.create(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, 420);
        }
        
        //write to file
        var outputStream = Components.classes[ "@mozilla.org/network/file-output-stream;1" ].createInstance(Components.interfaces.nsIFileOutputStream);
        outputStream.init(file, 0x04 | 0x08, 420, 0);
        
        var converterOutputStream = Components.classes["@mozilla.org/intl/converter-output-stream;1"].createInstance(Components.interfaces.nsIConverterOutputStream);
        converterOutputStream.init(outputStream, "UTF-8", 0, 0x0000);
        
        var prefCount = {value:0};
        var prefArray = eG_prefs.getChildList("", prefCount);
        if (!prefArray || (prefCount.value <= 0)) {
          alert("Export aborted !");
          converterOutputStream.close();
          outputStream.close();
          return;
        }
        
        // add description at the begining of the file
        var d = new Date();
        var dateStr = d.getFullYear() + "/" + (d.getMonth()+1) + "/"+d.getDate()+" "+ d.getHours()+":"+(d.getMinutes()<10? "0":"")+d.getMinutes()+":"+(d.getSeconds()<10? "0":"")+d.getSeconds();
        converterOutputStream.writeString( "//eG "+ eG_getVersion()+" ("+dateStr+")//\n");
        
        for(var i=0; i<prefArray.length; i++) {
          converterOutputStream.writeString( prefArray[i]+"\n"); // write pref name
          
          switch(eG_prefs.getPrefType(prefArray[i])) {
            case Components.interfaces.nsIPrefBranch.PREF_STRING:
              converterOutputStream.writeString(Components.interfaces.nsIPrefBranch.PREF_STRING+"\n"); // write pref type
              converterOutputStream.writeString(eG_prefs.getComplexValue(prefArray[i], Components.interfaces.nsISupportsString).data+"\n"); // write pref value
              break;
            
            case Components.interfaces.nsIPrefBranch.PREF_INT:
              converterOutputStream.writeString(Components.interfaces.nsIPrefBranch.PREF_INT+"\n"); // write pref type
              converterOutputStream.writeString(eG_prefs.getIntPref(prefArray[i])+"\n"); // write pref value
              break;
            
            case Components.interfaces.nsIPrefBranch.PREF_BOOL:
              converterOutputStream.writeString( Components.interfaces.nsIPrefBranch.PREF_BOOL+"\n"); // write pref type
              converterOutputStream.writeString(eG_prefs.getBoolPref(prefArray[i])+"\n"); // write pref value
              break;
          }
        }
        converterOutputStream.close();
        outputStream.close();
      }
    }
    
    function importPrefs() {
      var fp = Components.classes["@mozilla.org/filepicker;1"].createInstance(Components.interfaces.nsIFilePicker);
      fp.init(window, 'easyGestures', Components.interfaces.nsIFilePicker.modeOpen);
      fp.appendFilter("Preferences (*.ege)","*.ege");
      
      var ret = fp.show();
      if (ret == Components.interfaces.nsIFilePicker.returnOK) {
        var file = Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsILocalFile);
        var filePath = fp.file.path;
        if (filePath.substring(filePath.length-4,filePath.length)!=".ege") {
          alert("This type of file can't be imported !");
          return;
        }
        file.initWithPath(filePath);
        
        // read from file
        var inputStream = Components.classes["@mozilla.org/network/file-input-stream;1"].createInstance(Components.interfaces.nsIFileInputStream);
        inputStream.init(file, 0x01, 444, 0);
        
        var converterInputStream = Components.classes["@mozilla.org/intl/converter-input-stream;1"].createInstance(Components.interfaces.nsIConverterInputStream);
        converterInputStream.init(inputStream, "UTF-8", 1024, 0xFFFD);
        
        if (converterInputStream instanceof Components.interfaces.nsIUnicharLineInputStream) {
          var line = {};
          var cont = converterInputStream.readLine(line); // read first line containing description
          do {
            cont = converterInputStream.readLine(line); // read pref name
            var pref = line.value;
            
            cont = converterInputStream.readLine(line); // read pref type
            var type = (new Function ("return " + line.value ))(); // (new Function ("return " + data ))() replacing eval on data
            
            cont = converterInputStream.readLine(line); // read pref value
            var value = Components.classes["@mozilla.org/supports-string;1"].createInstance(Components.interfaces.nsISupportsString);
            value.data = line.value;
            
            try {
              switch (type) {
                case Components.interfaces.nsIPrefBranch.PREF_STRING:
                  eG_prefs.setComplexValue(pref, Components.interfaces.nsISupportsString, value);
                  break;
                
                case Components.interfaces.nsIPrefBranch.PREF_INT:
                  eG_prefs.setIntPref(pref, (new Function ("return " + value.data ))() ); // (new Function ("return " + data ))() replacing eval on data
                  break;
                
                case Components.interfaces.nsIPrefBranch.PREF_BOOL:
                  eG_prefs.setBoolPref(pref, (new Function ("return " + value.data ))() ); // (new Function ("return " + data ))() replacing eval on data
                  break;
              }
            }
            catch (ex) {
              alert("Exception: "+ ex.toString());
              break;
            }
          } while (cont);
        }
        converterInputStream.close();
        inputStream.close();
      }
    }
    
    function initMenuDialog() {
      window.setCursor('wait');
      
      eG_actionsPopupList = createActionsPopupList();
      createActions();
      createLoadURLScriptForCustomization();
      
      ["showButton", "showAltButton", "suppressKey", "contextKey"].forEach(
        function (element, index, array) {
          var menulist = document.getElementById(element + "Menulist");
          menulist.value = eG_prefs.getIntPref("activation." + element);
          if (menulist.selectedIndex == -1) {
            menulist.selectedIndex = menulist.itemCount - 1;
          }
          updateLabelAndTextboxFor(menulist);
        });
      
      updateUI();
      window.setCursor('auto');
    }
    
    function saveAllPreferences(element) {
      // we retrieve the associated prefwindow element
      while (element.tagName !== "prefwindow") {
        element = element.parentNode;
      }
      
      // we save the preferences of each preference pane
      for (var i=0; i < element.preferencePanes.length; ++i) {
        element.preferencePanes[i].writePreferences();
      }
    }
    
    function readActionsGroupPreference(name) {
      var preference = document.getElementById(name + "Menu");
      var ids = preference.value.split("/");
      
      var indexes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
      if (name.startsWith("extra")) {
        indexes = [0, 1, 2, 8, 9];
      }
      
      indexes.forEach(function (value, index, array) {
        var element = document.getElementById(name + "Sector" + value);
        element.setAttribute("actionID", ids[value]);
        element.setAttribute("label", eG_PopupLabels[ids[value]]);
      });
    }
    
    function preparePreferenceValueForNormalMenu(name) {
      var result = [];
      
      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].forEach(function (value, index, array) {
        result.push(document.getElementById(name + "Sector" + value).getAttribute("actionID"));
      });
      return result.join("/");
    }
    
    function preparePreferenceValueForExtraMenu(name) {
      var result = [];
      
      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].forEach(function (value, index, array) {
        if (value >= 3 && value <= 7) {
          result.push("0");
        }
        else {
          result.push(document.getElementById(name + "Sector" + value).getAttribute("actionID"));
        }
      });
      return result.join("/");
    }
    
    function readLoadURLScriptPreference(number) {
      var preference = document.getElementById("loadURLScript" + number);
      var string = preference.value.split("\u2022");

      document.getElementById("loadURLScript_name" + number).value = string[0];
      if ((new Function ("return " + string[2] ))()) {
        document.getElementById("loadURLScript_code" + number).value = string[1];
      }
      else {
        document.getElementById("loadURLScript_host" + number).value = string[1];
      }
      document.getElementById("loadURLScript_type" + number).selectedItem =
        document.getElementById( (new Function ("return " + string[2] ))() ?
          "Script" + number
        : "URL" + number);
      document.getElementById("loadURLScript_newIcon" + number).src = string[3];
      document.getElementById("loadURLScript_faviconCheck" + number).checked =
        (new Function ("return " + string[4] ))();
      document.getElementById("loadURLScript_newIconCheck" + number).checked =
        (new Function ("return " + string[5] ))();
    }
    
    function preparePreferenceValueForLoadURLScript(number) {
      var string = Components.classes["@mozilla.org/supports-string;1"]
                             .createInstance(Components.interfaces.nsISupportsString);
      string.data = document.getElementById("loadURLScript_name" + number).value
        + "\u2022" + (document.getElementById("URL" + number).selected ?
                       document.getElementById("loadURLScript_host" + number).value
                     : document.getElementById("loadURLScript_code" + number).value)
        + "\u2022" + document.getElementById("Script" + number).selected
        + "\u2022" + document.getElementById("loadURLScript_newIcon" + number).src
        + "\u2022" + document.getElementById("loadURLScript_faviconCheck" + number).checked
        + "\u2022" + document.getElementById("loadURLScript_newIconCheck" + number).checked;
      return string;
    }
    
    function resetOnDuplicatedKeys(menulist, textbox) {
      var contextKeyCode = document.getElementById("customContextKeyCode").value;
      var supprKeyCode = document.getElementById("customSupprKeyCode").value;

      if ((contextKeyCode == supprKeyCode) && contextKeyCode != 0) {
        menulist.value = 0;
        textbox.value = 0;
        alert(eG_duplicateKeyMessage);
      }
    }
    
    function fireChangeEventOnActionsGroup(name) {
      var element = document.getElementById("gr_" + name);
      fireChangeEventOn(element);
    }
    
    function fireChangeEventOnLoadURLScript(number) {
      var element = document.getElementById("gr_loadURLScript" + number);
      fireChangeEventOn(element);
    }
    
    function fireChangeEventOn(element) {
      // firing a change event triggers XUL's preferences system to change the
      // value of the preference
      var event = document.createEvent('Event');
      event.initEvent('change', true, false);
      element.dispatchEvent(event);
    }
    
    function updateOtherLabels(actionID, label) {
      var groupboxes = new Array(
        "main", "mainAlt1", "mainAlt2", "extra", "extraAlt1", "extraAlt2",
        "contextLink", "contextImage", "contextSelection", "contextTextbox"
      );
      
      for (var i=0; i<groupboxes.length; i++) {
        for (var sector=0; sector<10; sector++) {
          if (groupboxes[i].search("extra")!=-1 && sector>2 && sector<8)
            continue;
          
          var element = document.getElementById(groupboxes[i] + "Sector" + sector);
          if (element.getAttribute("actionID") == actionID) {
            element.setAttribute("label", label);
          }
        }
      }
    }
    
    function updateLabelAndTextboxFor(menulist) {
      var label = menulist.nextElementSibling;
      var textbox = label.nextElementSibling;
      var shouldBeDisabled = menulist.selectedIndex != menulist.itemCount - 1;
      
      label.disabled = shouldBeDisabled;
      textbox.disabled = shouldBeDisabled;
      if (shouldBeDisabled) {
        textbox.value = menulist.value;
      }
    }
    
    function updateUI() {
      //***************************************************
      // disabling tooltip sub-options
      //***************************************************
      var checking = document.getElementById("showTooltipsCheckbox").checked;
      document.getElementById("tooltipsDelayLabel").disabled = !checking;
      document.getElementById("tooltipsDelayValue").disabled = !checking;
      document.getElementById("tooltipsDelayUnit").disabled = !checking;
      
      //***************************************************
      // enabling/disabling alternative boxes
      //***************************************************
      var boxes = new Array("main","extra");
      for (var i=0; i<2; i++) {
        for (var sector=0; sector<10; sector++) {
          if (boxes[i].search("extra")!=-1 && sector>2 && sector<8)
            continue;
          document.getElementById(boxes[i] + "Alt1Sector" + sector).disabled =
            !document.getElementById(boxes[i] + "Alternative1Checkbox").checked;
          document.getElementById(boxes[i] + "Alt2Sector" + sector).disabled =
            !document.getElementById(boxes[i] + "Alternative2Checkbox").checked;
        }
      }
      
      //***************************************************
      // checking if menu is standard or large
      //***************************************************
      var menuIsLarge = (document.getElementById("menuType").selectedItem.value == "true");
      
      document.getElementById("mainSector3").hidden = !menuIsLarge;
      document.getElementById("mainSector7").hidden = !menuIsLarge;
      document.getElementById("mainAlt1Sector3").hidden = !menuIsLarge;
      document.getElementById("mainAlt1Sector7").hidden = !menuIsLarge;
      document.getElementById("mainAlt2Sector3").hidden = !menuIsLarge;
      document.getElementById("mainAlt2Sector7").hidden = !menuIsLarge;
      
      document.getElementById("contextLinkSector3").hidden = !menuIsLarge;
      document.getElementById("contextLinkSector7").hidden = !menuIsLarge;
      document.getElementById("contextImageSector3").hidden = !menuIsLarge;
      document.getElementById("contextImageSector7").hidden = !menuIsLarge;
      document.getElementById("contextSelectionSector3").hidden = !menuIsLarge;
      document.getElementById("contextSelectionSector7").hidden = !menuIsLarge;
      document.getElementById("contextTextboxSector3").hidden = !menuIsLarge;
      document.getElementById("contextTextboxSector7").hidden = !menuIsLarge;
      
      //***************************************************
      
      document.getElementById("showAfterDelayDelayLabel").disabled = !document.getElementById("showAfterDelayCheckbox").checked;
      document.getElementById("showAfterDelayDelayTextbox").disabled = !document.getElementById("showAfterDelayCheckbox").checked;
      
      //***************************************************
      // disabling autoscrolling sub-options
      //***************************************************
      
      var checking = document.getElementById("autoscrollingOnCheckbox").checked;
      document.getElementById("autoscrollingDelayLabel").disabled = !checking;
      document.getElementById("autoscrollingDelayValue").disabled = !checking;
      document.getElementById("autoscrollingDelayUnit").disabled = !checking;
      
      //***************************************************
      // displaying correct label for Load URL/Script
      //***************************************************
      
      setLabels();
      
      //***************************************************
      // displaying correct textarea for Load URL/Script
      //***************************************************
      
      for (i=1; i<=20; i++) { // loadURLScript 1 to 20
        var collapse = ((document.getElementById('loadURLScript_type'+i).selectedItem == document.getElementById('URL'+i) ) ? true:false);
        document.getElementById('loadURLScript_code'+i).collapsed = collapse;
        document.getElementById('loadURLScript_host'+i).collapsed = !collapse;
      }
      
      //***************************************************
      // Hiding/unhidding favicon check box for loadURLScript actions
      //***************************************************
      
      for (i=1; i<=20; i++) { // loadURLScript 1 to 20
        var  checkbox = document.getElementById('loadURLScript_faviconCheck'+i);
        if (document.getElementById('Script'+i).selected) {
          checkbox.checked = false;
          checkbox.collapsed = true;
        }
        else
          checkbox.collapsed = false;
      }
      
      //***************************************************
      // Hiding New Icon
      //***************************************************
      
      for (i=1; i<=20; i++) { // loadURLScript 1 to 20
        document.getElementById('loadURLScriptDisplay'+i).collapsed = !document.getElementById('loadURLScript_faviconCheck'+i).checked && !document.getElementById('loadURLScript_newIconCheck'+i).checked;
      }
    }
    
    function eG_getVersion() {
      // Since FF4, replaced the old call to nsIExtensionManager: this works using processNextEvent but is not very clean
      Components.utils.import("resource://gre/modules/AddonManager.jsm");
      var version = null;
      AddonManager.getAddonByID("{11F9F076-72B3-4586-995D-5042CF5D3AD4}",function(addon) {version = addon.version});
      var thread = Components.classes["@mozilla.org/thread-manager;1"].getService(Components.interfaces.nsIThreadManager).currentThread;
      while (version == null)
        thread.processNextEvent(true); // sleep until async value is available       
      return version;
    }
    
    function avoidMultipleInstances() {
      var wenum = Components.classes["@mozilla.org/appshell/window-mediator;1"].getService(Components.interfaces.nsIWindowMediator).getEnumerator("");
      
      while (wenum.hasMoreElements()) {
        var win = wenum.getNext();
        if (win.location == "chrome://easygestures/content/options.xul" && win != this) {
          win.focus();
          try {
            // switch dialog to appropriate panel when called from tips window
            var args = this.arguments[1].split("/");
            win.document.getElementById('eG_optionsWindow').showPane(win.document.getElementById(args[0]+'Pane'));
            win.document.getElementById(args[0]+"Tabboxes").selectedIndex=parseInt(args[1])-1; // Page 1 is index 0
          }
          catch (ex) {}
          
          this.close();
          return;
        }
      }
    }
    //]]>
  </script>
</prefwindow>
