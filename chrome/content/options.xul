<?xml version="1.0"?>

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is easyGestures.
   -
   - The Initial Developer of the Original Code is Ons Besbes.
   -
   - Contributor(s): ngdeleito
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://easygestures/locale/righttoleft.css" type="text/css"?>
<?xml-stylesheet href="chrome://easygestures/skin/actions.css" type="text/css"?>
<!DOCTYPE overlay SYSTEM "chrome://easygestures/locale/easygestures.dtd">

<prefwindow
  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  xmlns:html="http://www.w3.org/1999/xhtml"
  id="eG_optionsWindow"
  title="&options; - easyGestures"
  type="prefwindow"
  onload="avoidMultipleInstances(); initMenuDialog();"
  onkeypress="preventCloseOnEnter(event);"
  persist="lastSelected screenX screenY width height">

  <prefpane
    flex="1"
    image="chrome://easygestures/content/profile.png"
    label="&profile;"
    id="profilePane"
    style="overflow: auto;">
    <preferences>
      <preference id="startupTips" name="easygestures.profile.startupTips" type="bool" />
      <preference id="statusbarShowIcon" name="easygestures.profile.statusbarShowIcon" type="bool" />
    </preferences>
    <vbox flex="1">
      <hbox pack="center">
        <image src="chrome://easygestures/content/easyGestures.png" />
      </hbox>
      <hbox pack="center">
        <label
          id="version"
          value=""
          style="color: #3A69A6;font-weight:bold;"
          onmouseover="this.style.textDecoration='underline';this.style.cursor='pointer';"
          onmouseout="this.style.textDecoration='none';this.style.cursor='auto';"
          onclick="openReadmeWindow();"
          tooltiptext="&about.history;" />
      </hbox>
      <separator class="thin" />
      <hbox pack="center">
        <groupbox style="background-color:white;">
          <spacer height="4" />
          <menu label="&about.manage;">
            <menupopup>
              <menuitem label="&about.import;" onclick="importPrefs();initMenuDialog();" />
              <menuitem label="&about.export;" onclick="saveMenuSettings();exportPrefs();" />
              <menuitem label="&about.reset;" onclick="if (confirm('&about.reset;')) {Components.classes['@mozilla.org/appshell/window-mediator;1'].getService(Components.interfaces.nsIWindowMediator).getMostRecentWindow('navigator:browser').eG_setPrefs(null);initMenuDialog();}" />
            </menupopup>
          </menu>
          <spacer height="4" />
          <menu label="&about.stats;">
            <menupopup>
              <menuitem label="&about.statsDisplay;" onclick="window.openDialog('chrome://easygestures/content/stats.xul','','chrome,alwaysRaised,centerscreen');" />
              <menuitem label="&about.statsReset;" onclick="if (confirm('&about.statsReset;')) resetStats();" />
            </menupopup>
          </menu>
          <spacer height="4" />
        </groupbox>
      </hbox>
      <spacer flex="2" />
      <hbox pack="center">
        <label value="&about.createdBy;" style="color: #3A69A6;" />
        <label value="Ons Besbes" style="color: #3A69A6;margin-left:-0px;font-weight:bold;" />
      </hbox>
      <spacer flex="3" />
      <hbox pack="start">
        <checkbox preference="startupTips" label="&about.startupTips;" />
        <spacer flex="1" />
        <checkbox preference="statusbarShowIcon" label="&about.statusbarShowIcon;" onclick="showStatusbarIcon(this.checked);" />
      </hbox>
    </vbox>
  </prefpane>
  
  <prefpane
    flex="1"
    image="chrome://easygestures/content/behavior.png"
    label="&activation;"
    id="activationPane"
    style="overflow: auto;">
    <preferences>
      <preference id="showButton" name="easygestures.behavior.showButton" type="int" />
      <preference id="showKey" name="easygestures.behavior.showKey" type="int" />
      <preference id="showAfterDelay" name="easygestures.behavior.showAfterDelay" type="bool" />
      <preference id="showAfterDelayDelay" name="easygestures.behavior.showAfterDelayDelay" type="int" />
      <preference id="dragOnly" name="easygestures.behavior.dragOnly" type="bool" />
      <preference id="dragOnlyUpLeft" name="easygestures.behavior.dragOnlyUpLeft" type="bool" />
      <preference id="showAltButton" name="easygestures.behavior.showAltButton" type="int" />
      <preference id="supprKey" name="easygestures.behavior.supprKey" type="int" />
      <preference id="contextKey" name="easygestures.behavior.contextKey" type="int" />
      <preference id="contextShowAuto" name="easygestures.behavior.contextMenuAuto" type="bool" />
    </preferences>
    <label value="&use;" style="font-weight:bold;"/>
    <spacer height="3px" />
    <hbox align="center">
      <menulist id="showButtonMenulist" oncommand="updateLabelAndTextboxFor(this); fireChangeEventOn(this.parentNode.lastElementChild);">
        <menupopup>
          <menuitem label="&use.button.left;" value="0" />
          <menuitem label="&use.button.middle;" value="1" />
          <menuitem label="&use.button.right;" value="2" />
          <menuitem label="&use.button.custom;" />
        </menupopup>
      </menulist>
      <label value="&use.buttoncode;" />
      <textbox preference="showButton" size="2"
        onclick="this.value = event.button; fireChangeEventOn(this);" />
    </hbox>
    <label value="&use.and;" style="font-weight:bold;" />
    <radiogroup preference="showKey" style="margin-left: 1em">
      <radio label="&use.noKey;" value="0" />
      <radio label="&use.shift;" value="16" />
      <radio label="&use.ctrl;" value="17" />
    </radiogroup>
    <checkbox id="showAfterDelayCheckbox" preference="showAfterDelay" label="&use.afterDelay;" oncommand="updateUI();" />
    <hbox>
      <spacer width="22" />
      <vbox pack="center">
        <label id="showAfterDelayDelayLabel" value="&autoscrolling.autoscrollingDelayLabel;" />
      </vbox>
      <textbox id="showAfterDelayDelayTextbox" preference="showAfterDelayDelay" size="3" />
    </hbox>
    <checkbox id="dragOnlyCheckbox" preference="dragOnly" label="&use.dragOnly;" oncommand="updateUI();" />
    <hbox>
      <label id="dragOnlyUpLeftBlank" value="   " />
      <checkbox id="dragOnlyUpLeftCheckbox" preference="dragOnlyUpLeft" label="&use.upleft;" />
    </hbox>
    <menuseparator />
    <label value="&use.alternative;" style="font-weight: bold;" />
    <spacer height="3px" />
    <hbox align="center">
      <menulist id="showAltButtonMenulist" oncommand="updateLabelAndTextboxFor(this); fireChangeEventOn(this.parentNode.lastElementChild);">
        <menupopup>
          <menuitem label="&use.button.left;" value="0" />
          <menuitem label="&use.button.middle;" value="1" />
          <menuitem label="&use.button.right;" value="2" />
          <menuitem label="&use.button.custom;" />
        </menupopup>
      </menulist>
      <label value="&use.buttoncode;" />
      <textbox preference="showAltButton" size="2"
        onclick="this.value = event.button; fireChangeEventOn(this);" />
    </hbox>
    <label value="&use.also;" />
    <menuseparator />
    <label value="&suppress;" style="font-weight: bold;" />
    <spacer height="3px" />
    <hbox align="center">
      <menulist id="supprKeyMenulist"
        oncommand="updateLabelAndTextboxFor(this); resetOnDuplicatedKeys(this, this.parentNode.lastElementChild);  fireChangeEventOn(this.parentNode.lastElementChild);">
        <menupopup>
          <menuitem label="&use.noKey;" value="0" />
          <menuitem label="&suppress.ins;" value="45" />
          <menuitem label="&suppress.alt;" value="18" />
          <menuitem label="&suppress.ctrl;" value="17" />
          <menuitem label="&suppress.custom;" />
        </menupopup>
      </menulist>
      <label value="&suppress.keycode;" />
      <textbox id="customSupprKeyCode" preference="supprKey" size="4"
        onkeyup="this.value = event.keyCode; resetOnDuplicatedKeys(this.parentNode.firstElementChild, this); fireChangeEventOn(this);" />
    </hbox>
    <menuseparator />
    <label value="&contextmenu;" style="font-weight: bold;" />
    <spacer height="3px" />
    <hbox align="center">
      <menulist id="contextKeyMenulist"
        oncommand="updateLabelAndTextboxFor(this); resetOnDuplicatedKeys(this, this.parentNode.lastElementChild); fireChangeEventOn(this.parentNode.lastElementChild);">
        <menupopup>
          <menuitem label="&use.noKey;" value="0" />
          <menuitem label="&suppress.ins;" value="45" />
          <menuitem label="&suppress.alt;" value="18" />
          <menuitem label="&suppress.ctrl;" value="17" />
          <menuitem label="&suppress.custom;" />
        </menupopup>
      </menulist>
      <label value="&suppress.keycode;" />
      <textbox id="customContextKeyCode" preference="contextKey" size="4"
        onkeyup="this.value = event.keyCode; resetOnDuplicatedKeys(this.parentNode.firstElementChild, this); fireChangeEventOn(this);" />
    </hbox>
    <checkbox preference="contextShowAuto" label="&contextmenu.showAuto;" />
  </prefpane>

  <prefpane
    flex="1"
    image="chrome://easygestures/content/behavior.png"
    label="&behavior;"
    id="behaviorPane"
    style="overflow: auto;">
    <preferences>
      <preference id="moveAuto" name="easygestures.behavior.moveAuto" type="bool" />
      <preference id="largeMenu" name="easygestures.behavior.largeMenu" type="bool" />
      <preference id="menuOpacity" name="easygestures.behavior.menuOpacity" type="int" />
      <preference id="noIcons" name="easygestures.behavior.noIcons" type="bool" />
      <preference id="smallIcons" name="easygestures.behavior.smallIcons" type="bool" />
      <preference id="showTooltips" name="easygestures.behavior.showTooltips" type="bool" />
      <preference id="tooltipsDelay" name="easygestures.behavior.tooltipsDelay" type="int" />
      <preference id="tooltipsDelayOmit" name="easygestures.behavior.tooltipsDelayOmit" type="bool" />
      <preference id="handleLinks" name="easygestures.behavior.handleLinks" type="bool" />
      <preference id="linksDelay" name="easygestures.behavior.linksDelay" type="int" />
      <preference id="handleLinksAsOpenLink" name="easygestures.behavior.handleLinksAsOpenLink" type="bool" />
      <preference id="autoscrollingOn" name="easygestures.behavior.autoscrollingOn" type="bool" />
      <preference id="autoscrollingDelay" name="easygestures.behavior.autoscrollingDelay" type="int" />
    </preferences>
    <vbox>
      <label value="&move;" style="font-weight: bold;" />
      <spacer height="3px" />
      <hbox>
        <radiogroup flex="1" preference="moveAuto" orient="horizontal">
          <radio label="&move.key;" value="false" />
          <radio label="&move.edge;" value="true" />
        </radiogroup>
      </hbox>
      <menuseparator />
      <label value="&extras.menuType;" style="font-weight: bold;" />
      <spacer height="3px" />
      <hbox>
        <radiogroup flex="1" id="menuType" preference="largeMenu" orient="vertical" oncommand="updateUI();">
          <radio label="&extras.menu;" value="false" />
          <radio label="&extras.largeMenu;" value="true" />
        </radiogroup>
      </hbox>
      <menuseparator />
      <label value="&extras.display;" style="font-weight: bold;" />
      <spacer height="3px" />
      <hbox align="center">
        <label value="&extras.menuOpacity;" />
        <textbox preference="menuOpacity" type="number" min="0" max="100" size="3" />
        <label value="%" />
      </hbox>
      <separator class="thin" />
      <checkbox preference="noIcons" label="&extras.noIcons;"
        oncommand="document.getElementById('tooltipsDelayOmitCheckbox').checked = this.checked;" />
      <checkbox preference="smallIcons" label="&extras.smallIcons;" />
      <menuseparator />
      <checkbox id="showTooltipsCheckbox" preference="showTooltips"
        label="&extras.ttip;" oncommand="updateUI();"
        style="font-weight: bold;" />
      <spacer height="3px" />
      <hbox>
        <spacer width="22" />
        <vbox pack="center">
          <label id="tooltipsDelayLabel" value="&extras.ttipDelayLabel;" />
        </vbox>
        <textbox id="tooltipsDelayTextbox" preference="tooltipsDelay" size="3" />
        <hbox pack="center" flex="1">
          <checkbox id="tooltipsDelayOmitCheckbox"
            preference="tooltipsDelayOmit" label="&extras.ttipDelayOmit;" />
        </hbox>
      </hbox>
      <menuseparator />
      <checkbox preference="handleLinks" label="&link.through;" style="font-weight: bold;" />
      <spacer height="3px" />
      <hbox>
        <spacer width="22" />
        <vbox pack="center">
          <label id="linksDelayLabel" value="&link.delay;" />
        </vbox>
        <textbox preference="linksDelay" size="3" />
      </hbox>
      <hbox>
        <spacer width="22" />
        <radiogroup preference="handleLinksAsOpenLink" orient="vertical">
          <radio label="&link.throughAsAction;" value="true" />
          <radio label="&link.throughAsBrowser;" value="false" />
        </radiogroup>
        <vbox>
          <spacer height="4" />
          <hbox flex="0">
            <html:div>
              <html:a href="#" onclick="document.getElementById('eG_optionsWindow').showPane(document.getElementById('customizationsPane'));document.getElementById('customizationsTabboxes').selectedIndex=3;" style="text-decoration:underline;color: #3A69A6;">
                <image src="chrome://easygestures/content/link.png" />
              </html:a>
            </html:div>
          </hbox>
          <spacer flex="1" />
        </vbox>
      </hbox>
      <menuseparator />
      <checkbox id="autoscrollingOnCheckbox" preference="autoscrollingOn"
        label="&autoscrolling;" style="font-weight: bold;" oncommand="updateUI();" />
      <spacer height="3px" />
      <hbox>
        <spacer width="22" />
        <vbox pack="center">
          <label id="autoscrollingDelayLabel" value="&autoscrolling.autoscrollingDelayLabel;" />
        </vbox>
        <textbox id="autoscrollingDelayTextbox" preference="autoscrollingDelay" size="3" />
      </hbox>
    </vbox>
  </prefpane>
  
  <prefpane
    flex="1"
    image="chrome://easygestures/content/actions.png"
    label="&actions;"
    id="actionsPane"
    style="overflow: auto;">
    <preferences>
      <preference id="mainAlternative1" name="easygestures.actions.mainAlternative1" type="bool" />
      <preference id="mainAlternative2" name="easygestures.actions.mainAlternative2" type="bool" />
      <preference id="extraAlternative1" name="easygestures.actions.extraAlternative1" type="bool" />
      <preference id="extraAlternative2" name="easygestures.actions.extraAlternative2" type="bool" />
      <preference id="contextImageFirst" name="easygestures.actions.contextImageFirst" type="bool" />
      <preference id="contextTextboxFirst" name="easygestures.actions.contextTextboxFirst" type="bool" />
    </preferences>
    <tabbox orient="vertical" flex="1" id="actionsTabboxes">
      <tabs>
        <tab label="&actions.regular;" />
        <tab label="&actions.contextual;" />
      </tabs>
      <tabpanels flex="1">
        <tabpanel>
          <vbox>
            <spacer height="6px" />
            <toolbar style="-moz-appearance:none;border:0px;">
              <vbox pack="center">
                <label value="&actions.main;" style="font-weight: bold;" />
                <label id="mainLayoutTitle" value="&actions.primary;" style="font-weight: bold;color: #CC0033;" />
              </vbox>
              <toolbarspacer />
              <vbox pack="center">
                <image src="chrome://easygestures/content/small_arrow.png"/>
              </vbox>
              <toolbarbutton label="0" group="layout" type="radio" checked="true"
                tooltiptext="&actions.primary;"
                oncommand="document.getElementById('mainAlternative1Checkbox').setAttribute('collapsed', true);document.getElementById('mainAlternative2Checkbox').setAttribute('collapsed', true);document.getElementById('actionsMain').selectedIndex=0; document.getElementById('actionsMain').focus();document.getElementById('mainLayoutTitle').value='&actions.primary;';" />
              <toolbarbutton label="1" group="layout" type="radio"
                tooltiptext="&actions.alternative; 1"
                oncommand="document.getElementById('mainAlternative1Checkbox').setAttribute('collapsed', false);document.getElementById('mainAlternative2Checkbox').setAttribute('collapsed', true);document.getElementById('actionsMain').selectedIndex=1; document.getElementById('actionsMain').focus();document.getElementById('mainLayoutTitle').value='&actions.alternative; 1';" />
              <toolbarbutton label="2" group="layout" type="radio"
                tooltiptext="&actions.alternative; 2"
                oncommand="document.getElementById('mainAlternative2Checkbox').setAttribute('collapsed', false);document.getElementById('mainAlternative1Checkbox').setAttribute('collapsed', true);document.getElementById('actionsMain').selectedIndex=2; document.getElementById('actionsMain').focus();document.getElementById('mainLayoutTitle').value='&actions.alternative; 2';" />
              <toolbarspacer flex="1" />
              <checkbox collapsed="true" id="mainAlternative1Checkbox"
                preference="mainAlternative1" label="&actions.enabled;"
                style="font-weight: bold;padding:0px;margin-left:0px;margin-bottom:0px;margin-top:-0px;"
                oncommand="updateUI();" />
              <checkbox collapsed="true" id="mainAlternative2Checkbox"
                preference="mainAlternative2" label="&actions.enabled;"
                style="font-weight: bold;padding:0px;margin-left:0px;margin-bottom:0px;margin-top:-0px;"
                oncommand="updateUI();" />
              <toolbarspacer />
            </toolbar>
            <tabbox orient="vertical" id="actionsMain">
              <tabs>
                <tab label="&actions.primary;" hidden="true" />
                <tab label="&actions.alternative; 1" hidden="true" />
                <tab label="&actions.alternative; 2" hidden="true" />
              </tabs>
              <tabpanels style="-moz-appearance:none;border:0px;background-color:inherit;">
                <tabpanel>
                  <vbox id="gr_main" flex="1"></vbox>
                </tabpanel>
                <tabpanel>
                  <vbox flex="1">
                    <vbox id="gr_mainAlt1"></vbox>
                  </vbox>
                </tabpanel>
                <tabpanel>
                  <vbox flex="1">
                    <vbox id="gr_mainAlt2"></vbox>
                  </vbox>
                </tabpanel>
              </tabpanels>
            </tabbox>
            <menuseparator />
            <toolbar style="-moz-appearance:none;border:0px;">
              <vbox pack="center">
                <label value="&actions.extra;" style="font-weight: bold;" />
                <label id="extraLayoutTitle" value="&actions.primary;" style="font-weight: bold;color: #CC0033;" />
              </vbox>
              <toolbarspacer />
              <vbox pack="center">
                <image src="chrome://easygestures/content/small_arrow.png"/>
              </vbox>
              <toolbarbutton label="0" group="layout" type="radio" checked="true"
                tooltiptext="&actions.primary;"
                oncommand="document.getElementById('extraAlternative1Checkbox').setAttribute('collapsed', true);document.getElementById('extraAlternative2Checkbox').setAttribute('collapsed', true);document.getElementById('actionsExtra').selectedIndex=0; document.getElementById('actionsExtra').focus();document.getElementById('extraLayoutTitle').value='&actions.primary;';" />
              <toolbarbutton label="1" group="layout" type="radio"
                tooltiptext="&actions.alternative; 1"
                oncommand="document.getElementById('extraAlternative1Checkbox').setAttribute('collapsed', false);document.getElementById('extraAlternative2Checkbox').setAttribute('collapsed', true); document.getElementById('actionsExtra').selectedIndex=1; document.getElementById('actionsExtra').focus();document.getElementById('extraLayoutTitle').value='&actions.alternative; 1';" />
              <toolbarbutton label="2" group="layout" type="radio"
                tooltiptext="&actions.alternative; 2"
                oncommand="document.getElementById('extraAlternative2Checkbox').setAttribute('collapsed', false);document.getElementById('extraAlternative1Checkbox').setAttribute('collapsed', true); document.getElementById('actionsExtra').selectedIndex=2; document.getElementById('actionsExtra').focus();document.getElementById('extraLayoutTitle').value='&actions.alternative; 2';" />
              <toolbarspacer flex="1" />
              <checkbox collapsed="true" id="extraAlternative1Checkbox"
                preference="extraAlternative1" label="&actions.enabled;"
                style="font-weight: bold;padding:0px;margin-left:0px;margin-bottom:0px;margin-top:-0px;"
                oncommand="updateUI();" />
              <checkbox collapsed="true" id="extraAlternative2Checkbox"
                preference="extraAlternative2" label="&actions.enabled;"
                style="font-weight: bold;padding:0px;margin-left:0px;margin-bottom:0px;margin-top:-0px;"
                oncommand="updateUI();" />
              <toolbarspacer />
            </toolbar>
            <tabbox orient="vertical" id="actionsExtra">
              <tabs>
                <tab label="&actions.primary;" hidden="true" />
                <tab label="&actions.alternative; 1" hidden="true" />
                <tab label="&actions.alternative; 2" hidden="true" />
              </tabs>
              <tabpanels style="-moz-appearance:none;border:0px;background-color:inherit;">
                <tabpanel>
                  <vbox id="gr_extra" flex="1"></vbox>
                </tabpanel>
                <tabpanel>
                  <vbox flex="1">
                    <vbox id="gr_extraAlt1"></vbox>
                  </vbox>
                </tabpanel>
                <tabpanel>
                  <vbox flex="1">
                    <vbox id="gr_extraAlt2"></vbox>
                  </vbox>
                </tabpanel>
              </tabpanels>
            </tabbox>
            <vbox style="background-color:white;">
              <menuseparator />
              <hbox>
                <vbox>
                  <label value="&actions.info;" height="16px"
                    style="background-image:url(info.png);background-repeat:no-repeat; padding-left:22px; margin-left:10px;" />
                </vbox>
              </hbox>
            </vbox>
          </vbox>
        </tabpanel>
        <tabpanel flex="1">
          <vbox>
            <label value="&contextmenu.order;" style="font-weight: bold;" />
            <spacer height="3px" />
            <hbox pack="start" style="margin-left:16px;">
              <vbox>
                <checkbox preference="contextImageFirst" label="&contextmenu.imageFirst;" />
                <checkbox preference="contextTextboxFirst" label="&contextmenu.textboxFirst;" />
              </vbox>
            </hbox>
            <separator />
            <menuseparator />
            <vbox id="gr_contextLink"></vbox>
            <separator />
            <menuseparator />
            <vbox id="gr_contextImage"></vbox>
            <separator />
            <menuseparator />
            <vbox id="gr_contextSelection"></vbox>
            <separator />
            <menuseparator />
            <vbox id="gr_contextTextbox"></vbox>
          </vbox>
        </tabpanel>
      </tabpanels>
    </tabbox>
  </prefpane>
  
  <prefpane
    flex="1"
    image="chrome://easygestures/content/customizations.png"
    label="&customizations;"
    id="customizationsPane"
    style="overflow: auto;">
    <preferences>
      <preference id="loadURLin" name="easygestures.customizations.loadURLin" type="string" />
      <preference id="loadURLScript1" name="easygestures.customizations.loadURLScript1" type="unichar" />
      <preference id="loadURLScript2" name="easygestures.customizations.loadURLScript2" type="unichar" />
      <preference id="loadURLScript3" name="easygestures.customizations.loadURLScript3" type="unichar" />
      <preference id="loadURLScript4" name="easygestures.customizations.loadURLScript4" type="unichar" />
      <preference id="loadURLScript5" name="easygestures.customizations.loadURLScript5" type="unichar" />
      <preference id="loadURLScript6" name="easygestures.customizations.loadURLScript6" type="unichar" />
      <preference id="loadURLScript7" name="easygestures.customizations.loadURLScript7" type="unichar" />
      <preference id="loadURLScript8" name="easygestures.customizations.loadURLScript8" type="unichar" />
      <preference id="loadURLScript9" name="easygestures.customizations.loadURLScript9" type="unichar" />
      <preference id="loadURLScript10" name="easygestures.customizations.loadURLScript10" type="unichar" />
      <preference id="loadURLScript11" name="easygestures.customizations.loadURLScript11" type="unichar" />
      <preference id="loadURLScript12" name="easygestures.customizations.loadURLScript12" type="unichar" />
      <preference id="loadURLScript13" name="easygestures.customizations.loadURLScript13" type="unichar" />
      <preference id="loadURLScript14" name="easygestures.customizations.loadURLScript14" type="unichar" />
      <preference id="loadURLScript15" name="easygestures.customizations.loadURLScript15" type="unichar" />
      <preference id="loadURLScript16" name="easygestures.customizations.loadURLScript16" type="unichar" />
      <preference id="loadURLScript17" name="easygestures.customizations.loadURLScript17" type="unichar" />
      <preference id="loadURLScript18" name="easygestures.customizations.loadURLScript18" type="unichar" />
      <preference id="loadURLScript19" name="easygestures.customizations.loadURLScript19" type="unichar" />
      <preference id="loadURLScript20" name="easygestures.customizations.loadURLScript20" type="unichar" />
      <preference id="openLink" name="easygestures.customizations.openLink" type="string" />
      <preference id="closeBrowserOnLastTab" name="easygestures.customizations.closeBrowserOnLastTab" type="bool" />
    </preferences>
    <vbox flex="1">
      <tabbox orient="vertical" flex="1" id="customizationsTabboxes">
        <tabs>
          <tab label="&customizations.loadURLScript;" />
          <tab label="&customizations.runProgramFile;" />
          <tab label="&customizations.misc;" />
        </tabs>
        <tabpanels flex="1">
          <tabpanel flex="1">
            <vbox>
              <vbox style="background-color:white;">
                <hbox>
                  <vbox>
                    <label value="&input.infoSel;" height="16px"
                      style="background-image:url(info.png);background-repeat:no-repeat; padding-left:22px; margin-left:10px;" />
                    <label value="&input.infoPlaceHolder;" style="margin-left:32px;" />
                  </vbox>
                </hbox>
              </vbox>
              <separator />
              <vbox>
                <label value="&urlscript.load;" style="font-weight: bold;" />
                <spacer height="3px" />
                <hbox>
                  <menulist preference="loadURLin">
                    <menupopup>
                      <menuitem label="&urlscript.curTab;" value="curTab" />
                      <menuitem label="&urlscript.newTab;" value="newTab" />
                      <menuitem label="&urlscript.newWindow;" value="newWindow" />
                    </menupopup>
                  </menulist>
                </hbox>
                <separator />
                <menuseparator />
                <vbox flex="1" id="gr_loadURLScript1" preference-editable="true"
                  preference="loadURLScript1" onsynctopreference="return writeLoadURLScriptPreference(1);"></vbox>
                <separator />
                <menuseparator />
                <vbox flex="1" id="gr_loadURLScript2" preference-editable="true"
                  preference="loadURLScript2" onsynctopreference="return writeLoadURLScriptPreference(2);"></vbox>
                <separator />
                <menuseparator />
                <vbox flex="1" id="gr_loadURLScript3" preference-editable="true"
                  preference="loadURLScript3" onsynctopreference="return writeLoadURLScriptPreference(3);"></vbox>
                <separator />
                <menuseparator />
                <vbox flex="1" id="gr_loadURLScript4" preference-editable="true"
                  preference="loadURLScript4" onsynctopreference="return writeLoadURLScriptPreference(4);"></vbox>
                <separator />
                <menuseparator />
                <vbox flex="1" id="gr_loadURLScript5" preference-editable="true"
                  preference="loadURLScript5" onsynctopreference="return writeLoadURLScriptPreference(5);"></vbox>
                <separator />
                <menuseparator />
                <vbox flex="1" id="gr_loadURLScript6" preference-editable="true"
                  preference="loadURLScript6" onsynctopreference="return writeLoadURLScriptPreference(6);"></vbox>
                <separator />
                <menuseparator />
                <vbox flex="1" id="gr_loadURLScript7" preference-editable="true"
                  preference="loadURLScript7" onsynctopreference="return writeLoadURLScriptPreference(7);"></vbox>
                <separator />
                <menuseparator />
                <vbox flex="1" id="gr_loadURLScript8" preference-editable="true"
                  preference="loadURLScript8" onsynctopreference="return writeLoadURLScriptPreference(8);"></vbox>
                <separator />
                <menuseparator />
                <vbox flex="1" id="gr_loadURLScript9" preference-editable="true"
                  preference="loadURLScript9" onsynctopreference="return writeLoadURLScriptPreference(9);"></vbox>
                <separator />
                <menuseparator />
                <vbox flex="1" id="gr_loadURLScript10" preference-editable="true"
                  preference="loadURLScript10" onsynctopreference="return writeLoadURLScriptPreference(10);"></vbox>
                <separator />
                <menuseparator />
                <vbox flex="1" id="gr_loadURLScript11" preference-editable="true"
                  preference="loadURLScript11" onsynctopreference="return writeLoadURLScriptPreference(11);"></vbox>
                <separator />
                <menuseparator />
                <vbox flex="1" id="gr_loadURLScript12" preference-editable="true"
                  preference="loadURLScript12" onsynctopreference="return writeLoadURLScriptPreference(12);"></vbox>
                <separator />
                <menuseparator />
                <vbox flex="1" id="gr_loadURLScript13" preference-editable="true"
                  preference="loadURLScript13" onsynctopreference="return writeLoadURLScriptPreference(13);"></vbox>
                <separator />
                <menuseparator />
                <vbox flex="1" id="gr_loadURLScript14" preference-editable="true"
                  preference="loadURLScript14" onsynctopreference="return writeLoadURLScriptPreference(14);"></vbox>
                <separator />
                <menuseparator />
                <vbox flex="1" id="gr_loadURLScript15" preference-editable="true"
                  preference="loadURLScript15" onsynctopreference="return writeLoadURLScriptPreference(15);"></vbox>
                <separator />
                <menuseparator />
                <vbox flex="1" id="gr_loadURLScript16" preference-editable="true"
                  preference="loadURLScript16" onsynctopreference="return writeLoadURLScriptPreference(16);"></vbox>
                <separator />
                <menuseparator />
                <vbox flex="1" id="gr_loadURLScript17" preference-editable="true"
                  preference="loadURLScript17" onsynctopreference="return writeLoadURLScriptPreference(17);"></vbox>
                <separator />
                <menuseparator />
                <vbox flex="1" id="gr_loadURLScript18" preference-editable="true"
                  preference="loadURLScript18" onsynctopreference="return writeLoadURLScriptPreference(18);"></vbox>
                <separator />
                <menuseparator />
                <vbox flex="1" id="gr_loadURLScript19" preference-editable="true"
                  preference="loadURLScript19" onsynctopreference="return writeLoadURLScriptPreference(19);"></vbox>
                <separator />
                <menuseparator />
                <vbox flex="1" id="gr_loadURLScript20" preference-editable="true"
                  preference="loadURLScript20" onsynctopreference="return writeLoadURLScriptPreference(20);"></vbox>
              </vbox>
            </vbox>
          </tabpanel>
          <tabpanel flex="1">
            <vbox>
              <vbox style="background-color:white;">
                <hbox>
                  <vbox>
                    <label value="&input.infoSel;" height="16px"
                      style="background-image:url(info.png);background-repeat:no-repeat; padding-left:22px; margin-left:10px;" />
                    <label value="&input.infoPlaceHolder;" style="margin-left:32px;" />
                  </vbox>
                </hbox>
              </vbox>
              <separator />
              <menuseparator />
              <vbox>
                <vbox flex="1" id="gr_runProgramFile1"></vbox>
                <separator />
                <menuseparator />
                <vbox flex="1" id="gr_runProgramFile2"></vbox>
                <separator />
                <menuseparator />
                <vbox flex="1" id="gr_runProgramFile3"></vbox>
                <separator />
                <menuseparator />
                <vbox flex="1" id="gr_runProgramFile4"></vbox>
                <separator />
                <menuseparator />
                <vbox flex="1" id="gr_runProgramFile5"></vbox>
                <separator />
                <menuseparator />
                <vbox flex="1" id="gr_runProgramFile6"></vbox>
                <separator />
                <menuseparator />
                <vbox flex="1" id="gr_runProgramFile7"></vbox>
                <separator />
                <menuseparator />
                <vbox flex="1" id="gr_runProgramFile8"></vbox>
                <separator />
                <menuseparator />
                <vbox flex="1" id="gr_runProgramFile9"></vbox>
                <separator />
                <menuseparator />
                <vbox flex="1" id="gr_runProgramFile10"></vbox>
              </vbox>
            </vbox>
          </tabpanel>
          <tabpanel>
            <vbox>
              <vbox style="background-color:white;">
                <hbox>
                  <vbox>
                    <label value="&input.infoSel;"  height="16px"
                      style="background-image:url(info.png);background-repeat:no-repeat; padding-left:22px; margin-left:10px;" />
                  </vbox>
                </hbox>
              </vbox>
              <separator />
              <menuseparator />
              <hbox>
                <image id="openLinkImage" class="small_openLink" />
                <vbox>
                  <spacer flex="1" />
                  <label value="&link;" style="font-weight: bold;" />
                  <spacer flex="1" />
                </vbox>
              </hbox>
              <spacer height="3px" />
              <radiogroup preference="openLink" orient="vertical" oncommand="updateUI();">
                <radio label="&link.curTab;" value="curTab" />
                <radio label="&link.newTab;" value="newTab" />
                <radio label="&link.newWindow;" value="newWindow" />
              </radiogroup>
              <separator />
              <menuseparator />
              <hbox>
                <image id="closeTabImage" class="small_closeTab" />
                <vbox>
                  <spacer flex="1" />
                  <label value="&closeTab;" style="font-weight: bold;" />
                  <spacer flex="1" />
                </vbox>
              </hbox>
              <spacer height="3px" />
              <checkbox preference="closeBrowserOnLastTab" label="&closeTab.closeBrowserOnLastTab;" />
            </vbox>
          </tabpanel>
        </tabpanels>
      </tabbox>
    </vbox>
  </prefpane>
  
  <spacer height="6" />
  <hbox flex="1" id="eG_dialogButtons" pack="end" hidden="false">
    <vbox>
      <hbox>
        <button label="&ok;" oncommand="saveMenuSettings();acceptDialog();" />
        <button label="&cancel;" oncommand="cancelDialog();" />
        <button id="eG_apply" label="&apply;" oncommand="saveMenuSettings();this.disabled=true;setTimeout('document.getElementById(\'eG_apply\').disabled=false;',2000);" />
        <button label="&help;" oncommand="window.openDialog('chrome://easygestures/content/tips.xul','','chrome,centerscreen,resizable');" />
      </hbox>
      <spacer height="4" />
    </vbox>
    <resizer dir="bottomend"></resizer>
  </hbox>
  
  <script type="application/x-javascript" src="chrome://global/content/globalOverlay.js" />
  <script type="application/x-javascript" src="chrome://global/content/menu.js" />
  <script type="application/x-javascript" src="chrome://easygestures/content/integration.js" />
  
  <script type="application/x-javascript">
    var eG_duplicateKeyMessage = "&duplicatekey.warning;";
    var eG_version = "&about.version; ";
    var eG_faviconNotFound = "&urlscript.faviconNotFound;";
    var eG_skinCurrent = "chrome://easygestures/skin/";
    
    var runProgramFilesIndex = 41;
    var loadURLScriptIndex = 51;
    
    //*************************************************************
    // variables needed in createActionsPopupList() function
    //*************************************************************
    
    var eG_PopupLabels = new Array(
      "&func.empty;", "&func.more;", "&func.firstPage;", "&func.lastPage;",
      "&func.backSite;", "&func.forwardSite;", "&func.back;", "&func.forward;",
      "&func.reload;", "&func.up;", "&func.root;", "&func.pageTop;",
      "&func.pageBottom;", "&func.autoscrolling;", "&func.newTab;",
      "&func.duplicateTab;", "&func.prevTab;", "&func.nextTab;",
      "&func.closeTab;", "&func.closeOtherTabs;", "&func.undoCloseTab;",
      "&func.newWindow;", "&func.duplicateWindow;", "&func.closeOtherWindows;",
      "&func.closeBrowser;", "&func.minimizeWindow;", "&func.fullscreen;",
      "&func.openLink;", "&func.openLinkNewWindow;", "&func.copyLink;",
      "&func.sendLink;", "&func.copyImageLocation;", "&func.saveLinkAs;",
      "&func.saveImageAs;", "&func.savePageAs;", "&func.hideImages;",
      "&func.copyImage;", "&func.homepage;", "&func.dailyReadings;",
      "&func.searchWeb;", "&func.empty;", "&func.runProgramFile1;",
      "&func.runProgramFile2;", "&func.runProgramFile3;",
      "&func.runProgramFile4;", "&func.runProgramFile5;",
      "&func.runProgramFile6;", "&func.runProgramFile7;",
      "&func.runProgramFile8;", "&func.runProgramFile9;",
      "&func.runProgramFile10;", "&func.loadURLScript1;",
      "&func.loadURLScript2;", "&func.loadURLScript3;", "&func.loadURLScript4;",
      "&func.loadURLScript5;", "&func.loadURLScript6;", "&func.loadURLScript7;",
      "&func.loadURLScript8;", "&func.loadURLScript9;",
      "&func.loadURLScript10;", "&func.loadURLScript11;",
      "&func.loadURLScript12;", "&func.loadURLScript13;",
      "&func.loadURLScript14;", "&func.loadURLScript15;",
      "&func.loadURLScript16;", "&func.loadURLScript17;",
      "&func.loadURLScript18;", "&func.loadURLScript19;",
      "&func.loadURLScript20;", "&func.markVisitedLinks;",
      "&func.bookmarkThisLink;", "&func.bookmarkPage;",
      "&func.bookmarkOpenTabs;", "&func.bookmarks;", "&func.bookmarksToolbar;",
      "&func.history;", "&func.viewPageSource;", "&func.viewPageInfo;",
      "&func.showOnlyThisFrame;", "&func.properties;", "&func.printPage;",
      "&func.mail;", "&func.privateBrowsing;", "&func.cut;", "&func.copy;",
      "&func.paste;", "&func.undo;", "&func.selectAll;", "&func.toggleFindBar;",
      "&func.zoomIn;", "&func.zoomOut;", "&func.zoomReset;"
    );
    
    var eG_PopupImages = new Array(
      "empty", "more", "firstPage", "lastPage", "backSite", "forwardSite",
      "back", "forward", "reload", "up", "root", "pageTop", "pageBottom",
      "autoscrolling", "newTab", "duplicateTab", "prevTab", "nextTab",
      "closeTab", "closeOtherTabs", "undoCloseTab", "newWindow",
      "duplicateWindow", "closeOtherWindows", "closeBrowser", "minimizeWindow",
      "fullscreen", "openLink", "openLinkNewWindow", "copyLink", "sendLink",
      "copyImageLocation", "saveLinkAs", "saveImageAs", "savePageAs",
      "hideImages", "copyImage", "homepage", "dailyReadings", "searchWeb",
      "empty", "runProgramFile1", "runProgramFile2", "runProgramFile3",
      "runProgramFile4", "runProgramFile5", "runProgramFile6",
      "runProgramFile7", "runProgramFile8", "runProgramFile9",
      "runProgramFile10", "loadURLScript1", "loadURLScript2", "loadURLScript3",
      "loadURLScript4", "loadURLScript5", "loadURLScript6", "loadURLScript7",
      "loadURLScript8", "loadURLScript9", "loadURLScript10", "loadURLScript11",
      "loadURLScript12", "loadURLScript13", "loadURLScript14",
      "loadURLScript15", "loadURLScript16", "loadURLScript17",
      "loadURLScript18", "loadURLScript19", "loadURLScript20",
      "markVisitedLinks", "bookmarkThisLink", "bookmarkPage",
      "bookmarkOpenTabs", "bookmarks", "bookmarksToolbar", "history",
      "viewPageSource", "viewPageInfo", "showOnlyThisFrame", "properties",
      "printPage", "mail", "privateBrowsing", "cut", "copy", "paste", "undo",
      "selectAll", "toggleFindBar", "zoomIn", "zoomOut", "zoomReset"
    );
    
    var contextCaption = {
      contextLink: "&contextmenu.link;",
      contextImage: "&contextmenu.image;",
      contextSelection: "&contextmenu.selection;",
      contextTextbox: "&contextmenu.textbox;",
    }
    
    function openReadmeWindow() {
      // need to do that to center window because centerscreen parameter does not work
      var parameters = "resizable,scrollbars=yes,width=670,height=700, screenX=";
      parameters += (screen.availWidth - 670) / 2 + ",screenY=" + (screen.availHeight - 700) / 2;
      window.open('chrome://easygestures/content/readme.html','eG_readme', parameters);
    }
    
    function setLabels() {
      for (var i=1; i &lt;= 20; i++) {
        // loadURLScript 1 to 20
        document.getElementById("loadURLScript_Label"+i).value= (document.getElementById("loadURLScript_type"+i).selectedItem==document.getElementById("Script"+i))?"&urlscript.code;":"&urlscript.host;";
      }
    }
    
    function createRunProgramFileForCustomization () {
      for (var i=1; i &lt;= 10 ; i++) {
        // runProgramFile 1 to 10
        var groupbox = document.getElementById("gr_runProgramFile"+i);
        
        // empty groupbox if needed first
        if (groupbox.hasChildNodes()) {
          while (groupbox.lastChild != null) {
            groupbox.removeChild(groupbox.lastChild);
          }
        }
        
        //////////////////////////////////////////////////////////
        // caption
        //////////////////////////////////////////////////////////
        var titleNode = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "hbox");
        //caption.setAttribute("style","background-color:#F3F3F1;");
        
        var image = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "image");
        image.setAttribute("id","runProgramFileImg");
        image.style.listStyleImage="url('"+eG_skinCurrent+"small_actions.png')";
        image.setAttribute("class","small_runProgramFile"+i);
        titleNode.appendChild(image);
        
        var vbox = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "vbox");
        titleNode.appendChild(vbox);
        
        var spacer = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "spacer");
        spacer.setAttribute("flex","1");
        vbox.appendChild(spacer);
        
        var label = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "label");
        label.setAttribute("value","&extern.tab; "+i);
        label.setAttribute("style","font-weight: bold;");
        vbox.appendChild(label);
        
        spacer = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "spacer");
        spacer.setAttribute("flex","1");
        vbox.appendChild(spacer);
        
        var hbox = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "hbox");
        hbox.setAttribute("id","runProgramFileDisplay"+i);
        titleNode.appendChild(hbox);
        
        vbox = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "vbox");
        hbox.appendChild(vbox);
        
        label = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "label");
        label.setAttribute("value"," - ");
        vbox.appendChild(label);
        
        vbox = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "vbox");
        hbox.appendChild(vbox);
        
        image = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "image");
        image.setAttribute("id","runProgramFile_newIcon"+i);
        image.setAttribute("src","");
        image.setAttribute("maxwidth","20");
        image.setAttribute("maxheight","20");
        vbox.appendChild(image);
        
        groupbox.appendChild(titleNode);
        
        var separator = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "separator");
        separator.setAttribute("class","thin");
        groupbox.appendChild(separator);
        
        //////////////////////////////////////////////////////////
        // options
        //////////////////////////////////////////////////////////
        
        hbox = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "hbox");
        hbox.setAttribute("flex","1");
        groupbox.appendChild(hbox);
        
        vbox = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "vbox");
        hbox.appendChild(vbox);
        
        spacer = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "spacer");
        spacer.setAttribute("height","3");
        vbox.appendChild(spacer);
        
        label = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "label");
        label.setAttribute("value","&extern.name;");
        vbox.appendChild(label);
        
        spacer = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "spacer");
        spacer.setAttribute("height","10");
        vbox.appendChild(spacer);
        
        label = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "label");
        label.setAttribute("value","&extern.path;");
        vbox.appendChild(label);
        
        spacer = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "spacer");
        spacer.setAttribute("height","10");
        vbox.appendChild(spacer);
        
        label = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "label");
        label.setAttribute("value","&extern.arguments;");
        vbox.appendChild(label);
        
        spacer = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "spacer");
        spacer.setAttribute("height","1");
        vbox.appendChild(spacer);
        
        vbox = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "vbox");
        vbox.setAttribute("flex","1");
        hbox.appendChild(vbox);
        
        hbox = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "hbox");
        vbox.appendChild(hbox);
        var textbox = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "textbox");
        textbox.setAttribute("id","runProgramFile_name"+i);
        textbox.setAttribute("onchange","updateOtherLabels("+(runProgramFilesIndex+i+-1)+", this.value);");
        textbox.setAttribute("size","21");
        textbox.setAttribute("maxlength","20");
        hbox.appendChild(textbox);
        
        hbox = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "hbox");
        vbox.appendChild(hbox);
        
        textbox = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "textbox");
        textbox.setAttribute("id","runProgramFile_path"+i);
        textbox.setAttribute("flex","1");
        textbox.setAttribute("onchange","if (document.getElementById('runProgramFile_appIconCheck"+i+"').checked) retrieveAppIcon(this.value,"+i+");");
        hbox.appendChild(textbox);
        
        var button = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "button");
        button.setAttribute("label","&extern.browse;");
        button.setAttribute("oncommand","browse('runProgramFile_path"+i+"');if (document.getElementById('runProgramFile_appIconCheck"+i+"').checked) retrieveAppIcon(this.value,"+i+");");
        hbox.appendChild(button);
        
        textbox = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "textbox");
        textbox.setAttribute("id","runProgramFile_arg"+i);
        textbox.setAttribute("size","30");
        vbox.appendChild(textbox);
        
        separator = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "separator");
        separator.setAttribute("class","thin");
        vbox.appendChild(separator);
        
        hbox = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "hbox");
        vbox.appendChild(hbox);
        
        var checkbox = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "checkbox");
        checkbox.setAttribute("id","runProgramFile_appIconCheck"+i);
        checkbox.setAttribute("label","&extern.icon;");
        checkbox.setAttribute("oncommand","if (this.checked) {retrieveAppIcon(document.getElementById('runProgramFile_path"+i+"').value,"+i+"); document.getElementById('runProgramFile_newIconCheck"+i+"').checked= false;} updateUI();");
        hbox.appendChild(checkbox);
        
        checkbox = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "checkbox");
        checkbox.setAttribute("id","runProgramFile_newIconCheck"+i);
        checkbox.setAttribute("label","&changeIcon;");
        checkbox.setAttribute("oncommand","if (this.checked) document.getElementById('runProgramFile_appIconCheck"+i+"').checked= false; updateUI();");
        hbox.appendChild(checkbox);
        
        vbox = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "vbox");
        vbox.setAttribute("pack","center");
        hbox.appendChild(vbox);
        
        image = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "image");
        image.setAttribute("src","chrome://easygestures/content/browse.png");
        image.setAttribute("onclick","if ( document.getElementById('runProgramFile_newIconCheck"+i+"').checked) retrieveCustomIconFile('runProgramFile',"+i+");");
        vbox.appendChild(image);
      }
    }
    
    function createLoadURLScriptForCustomization() {
      for (var i=1; i &lt;= 20; i++) {
        // loadURLScript 1 to 20
        var groupbox = document.getElementById("gr_loadURLScript" + i);
        
        // empty groupbox if needed first
        if (groupbox.hasChildNodes()) {
          while (groupbox.lastChild != null) {
            groupbox.removeChild(groupbox.lastChild);
          }
        }
        
        //////////////////////////////////////////////////////////
        // header
        //////////////////////////////////////////////////////////
        
        var titleNode = document.createElement("hbox");
        titleNode.setAttribute("align", "center");
        
        var image = document.createElement("image");
        image.setAttribute("id", "loadURLScriptImg");
        image.style.listStyleImage = "url('" + eG_skinCurrent + "small_actions.png')";
        image.setAttribute("class", "small_loadURLScript" + i);
        titleNode.appendChild(image);
        
        var label = document.createElement("label");
        label.setAttribute("value", "&urlscript.url;/&urlscript.script; " + i);
        label.setAttribute("style", "font-weight: bold;");
        titleNode.appendChild(label);
        
        var hbox = document.createElement("hbox");
        hbox.setAttribute("id", "loadURLScriptDisplay" + i);
        hbox.setAttribute("align", "center");
        titleNode.appendChild(hbox);
        
        label = document.createElement("label");
        label.setAttribute("value", " - ");
        hbox.appendChild(label);
        
        image = document.createElement("image");
        image.setAttribute("id", "loadURLScript_newIcon" + i);
        image.setAttribute("src", "");
        image.setAttribute("maxwidth", "20");
        image.setAttribute("maxheight", "20");
        hbox.appendChild(image);
        
        groupbox.appendChild(titleNode);
        
        var separator = document.createElement("separator");
        separator.setAttribute("class", "thin");
        groupbox.appendChild(separator);
        
        //////////////////////////////////////////////////////////
        // options
        //////////////////////////////////////////////////////////
        
        hbox = document.createElement("hbox");
        hbox.setAttribute("flex", "1");
        groupbox.appendChild(hbox);
        
        var vbox = document.createElement("vbox");
        hbox.appendChild(vbox);
        
        var spacer = document.createElement("spacer");
        spacer.setAttribute("height", "3");
        vbox.appendChild(spacer);
        
        label = document.createElement("label");
        label.setAttribute("value", "&urlscript.name;");
        vbox.appendChild(label);
        
        spacer = document.createElement("spacer");
        spacer.setAttribute("height", "10");
        vbox.appendChild(spacer);
        
        label = document.createElement("label");
        label.setAttribute("id", "loadURLScript_Label" + i);
        label.setAttribute("value", "");
        vbox.appendChild(label);
        
        vbox = document.createElement("vbox");
        vbox.setAttribute("flex", "1");
        hbox.appendChild(vbox);
        
        hbox = document.createElement("hbox");
        vbox.appendChild(hbox);
        
        var textbox = document.createElement("textbox");
        textbox.setAttribute("id", "loadURLScript_name" + i);
        textbox.setAttribute("onchange", "updateOtherLabels(" + (loadURLScriptIndex+i-1) + ", this.value); fireChangeEventOnLoadURLScript(" + i + ");");
        textbox.setAttribute("size", "21");
        textbox.setAttribute("maxlength", "20");
        hbox.appendChild(textbox);
        
        var radiogroup = document.createElement("radiogroup");
        radiogroup.setAttribute("id", "loadURLScript_type" + i);
        radiogroup.setAttribute("orient", "horizontal");
        radiogroup.setAttribute("oncommand", "updateUI(); fireChangeEventOnLoadURLScript(" + i + ");");
        hbox.appendChild(radiogroup);
        
        var radio = document.createElement("radio");
        radio.setAttribute("id", "URL" + i);
        radio.setAttribute("label", "&urlscript.url;");
        radiogroup.appendChild(radio);
        
        radio = document.createElement("radio");
        radio.setAttribute("id", "Script" + i);
        radio.setAttribute("label", "&urlscript.script;");
        radiogroup.appendChild(radio);
        
        var stack = document.createElement("stack");
        vbox.appendChild(stack);
        
        textbox = document.createElement("textbox");
        textbox.setAttribute("id", "loadURLScript_host" + i);
        textbox.setAttribute("size", "30");
        textbox.setAttribute("onchange", "if (document.getElementById('loadURLScript_faviconCheck"+i+"').checked) retrieveFavicon(this.value,"+i+"); fireChangeEventOnLoadURLScript(" + i + ");");
        stack.appendChild(textbox);
        
        textbox = document.createElement("textbox");
        textbox.setAttribute("id", "loadURLScript_code" + i);
        textbox.setAttribute("size", "30");
        textbox.setAttribute("multiline", "true");
        textbox.setAttribute("rows", "6");
        textbox.setAttribute("onchange", "fireChangeEventOnLoadURLScript(" + i + ");");
        stack.appendChild(textbox);
        
        separator = document.createElement("separator");
        separator.setAttribute("class", "thin");
        vbox.appendChild(separator);
        
        hbox = document.createElement("hbox");
        hbox.setAttribute("align", "center");
        vbox.appendChild(hbox);
        
        var checkbox = document.createElement("checkbox");
        checkbox.setAttribute("id", "loadURLScript_faviconCheck" + i);
        checkbox.setAttribute("label", "&urlscript.icon;");
        checkbox.setAttribute("oncommand", "if (this.checked) {retrieveFavicon(document.getElementById('loadURLScript_host"+i+"').value,"+i+"); document.getElementById('loadURLScript_newIconCheck"+i+"').checked= false;} updateUI(); fireChangeEventOnLoadURLScript(" + i + ");");
        hbox.appendChild(checkbox);
        
        checkbox = document.createElement("checkbox");
        checkbox.setAttribute("id", "loadURLScript_newIconCheck" + i);
        checkbox.setAttribute("label", "&changeIcon;");
        checkbox.setAttribute("oncommand","if (this.checked) document.getElementById('loadURLScript_faviconCheck"+i+"').checked= false; updateUI(); fireChangeEventOnLoadURLScript(" + i + ");");
        hbox.appendChild(checkbox);
        
        image = document.createElement("image");
        image.setAttribute("src", "chrome://easygestures/content/browse.png");
        image.setAttribute("onclick", "if ( document.getElementById('loadURLScript_newIconCheck"+i+"').checked) retrieveCustomIconFile('loadURLScript',"+i+");");
        hbox.appendChild(image);
        
        readLoadURLScriptPreference(i);
      }
    }
    
    function createActionsMenulistWithSectorID(sectorID) {
      var hbox = document.createElement("hbox");
      hbox.setAttribute("pack", "center");
      
      menulist.setAttribute("id", sectorID);
      var menulist = document.createElement("menulist");
      menulist.setAttribute("editable", "false");
      menulist.setAttribute("width", "150");
      menulist.setAttribute("crop", "end");
      menulist.setAttribute("sizetopopup", "false");
      menulist.setAttribute("actionID", "");
      menulist.setAttribute("onchange", "updateOtherLabels(this.getAttribute('actionID'), this.label)");
      menulist.setAttribute("oncommand", "updateUI()");
      menulist.setAttribute("onmousedown", "attachMenupopup(this)");

      hbox.appendChild(menulist);
      return hbox;
    }
    
    function createActions() {
      var boxes = new Array(
        "main", "mainAlt1", "mainAlt2", "extra", "extraAlt1", "extraAlt2",
        "contextLink", "contextImage", "contextSelection", "contextTextbox"
      );
      
      for (var i=0; i &lt; boxes.length; i++) {
        var box = document.getElementById("gr_" + boxes[i]);
        
        // empty box if needed first
        if (box.hasChildNodes()) {
          while (box.lastChild != null) {
            box.removeChild(box.lastChild);
          }
        }
        
        if (boxes[i].search("context") != -1) {
          var label = document.createElement("label");
          label.setAttribute("value", contextCaption[boxes[i]]);
          label.setAttribute("style","font-weight: bold;");
          box.appendChild(label);
        }
        
        // sector 0
        box.appendChild(createActionsMenulistWithSectorID(boxes[i] + "Sector0"));
        
        // sectors 9 and 1
        var hbox = document.createElement("hbox");
        hbox.setAttribute("pack", "center");
        
        hbox.appendChild(createActionsMenulistWithSectorID(boxes[i] + "Sector9"));
        
        var spacer = document.createElement("spacer");
        spacer.setAttribute("height", "0");
        spacer.setAttribute("width", "11px");
        hbox.appendChild(spacer);
        
        hbox.appendChild(createActionsMenulistWithSectorID(boxes[i] + "Sector1"));
        box.appendChild(hbox);
        
        // sectors 8,7 and 2,3
        hbox = document.createElement("hbox");
        hbox.setAttribute("pack", "center");
        box.appendChild(hbox);
        
        var vbox = document.createElement("vbox");
        vbox.setAttribute("pack", "center");
        hbox.appendChild(vbox);
        
        vbox.appendChild(createActionsMenulistWithSectorID(boxes[i] + "Sector8"));
        
          vbox.appendChild(createActionsMenulistWithSectorID(boxes[i] + "Sector7"));
        if (!boxes[i].startsWith("extra")) {
        }
        
        ///////////////////////////////
        vbox = document.createElement("vbox");
        hbox.appendChild(vbox);
        
        spacer = document.createElement("spacer");
        spacer.setAttribute("flex", "1");
        vbox.appendChild(spacer);
        
        var image = document.createElement("image");
        image.setAttribute("id", boxes[i]+"Image");
        if (!boxes[i].startsWith("extra")) {
          image.setAttribute("src", "mainMenu.png");
        }
        else {
          image.setAttribute("src", "extraMenu.png");
        }
        image.setAttribute("width", "41");
        image.setAttribute("height", "41");
        vbox.appendChild(image);
        
        spacer = document.createElement("spacer");
        spacer.setAttribute("flex", "1");
        vbox.appendChild(spacer);
        ///////////////////////////////
        
        vbox = document.createElement("vbox");
        vbox.setAttribute("pack", "center");
        hbox.appendChild(vbox);
        
        vbox.appendChild(createActionsMenulistWithSectorID(boxes[i] + "Sector2"));
        
          vbox.appendChild(createActionsMenulistWithSectorID(boxes[i] + "Sector3"));
        if (!boxes[i].startsWith("extra")) {
        }
        
        if (!boxes[i].startsWith("extra")) {
          // sectors 6 and 4
          hbox = document.createElement("hbox");
          hbox.setAttribute("pack", "center");
          
          hbox.appendChild(createActionsMenulistWithSectorID(boxes[i], "Sector6"));
          
          spacer = document.createElement("spacer");
          spacer.setAttribute("height", "0");
          spacer.setAttribute("width", "11px");
          hbox.appendChild(spacer);
          
          hbox.appendChild(createActionsMenulistWithSectorID(boxes[i], "Sector4"));
          box.appendChild(hbox);
          
          // sector 5
          box.appendChild(createActionsMenulistWithSectorID(boxes[i], "Sector5"));
        }
        
      }
    }
  </script>
  
  <script type="application/x-javascript">
    //<![CDATA[
    
    var eG_prefs = Components.classes["@mozilla.org/preferences-service;1"].getService(Components.interfaces.nsIPrefService).getBranch("easygestures.");
    var eG_actionsPopupList;
    
    function retrieveAppIcon(url, actionNumber) {
      if (url != "" && ( url.match(/\.exe$/i) !=null || url.match(/\.ico$/i) != null ) ) {
        url = "moz-icon:file:///"+url;
        url = url+"?size=32";
        document.getElementById("runProgramFile_newIcon"+actionNumber).src= url;
      }
    }
    
    function retrieveFavicon(url, actionNumber) {
      if (url != "") {
        if (url.match(/\:\/\//i) == null)
          url ="http://"+url;
        
        var faviconPath = null;
        var faviconService = Components.classes["@mozilla.org/browser/favicon-service;1"].getService(Components.interfaces.nsIFaviconService);
        var ios = Components.classes["@mozilla.org/network/io-service;1"].getService(Components.interfaces.nsIIOService);
        
        try {
          faviconPath = faviconService.getFaviconForPage(ios.newURI(ios.newURI(url, null, null).prePath,null,null)).spec;
        }
        catch (e) {
          faviconPath = ios.newURI(url, null, null).prePath + "/favicon.ico";
        }
        
        if (faviconPath != null && faviconPath != "")
          document.getElementById("loadURLScript_newIcon"+actionNumber).src = faviconPath;
        else {
          document.getElementById("loadURLScript_newIcon"+actionNumber).src = "";
          document.getElementById('loadURLScriptDisplay'+actionNumber).collapsed = true;
          document.getElementById("loadURLScript_faviconCheck"+actionNumber).checked = false;
        }
      }
    }
    
    function retrieveCustomIconFile(action, actionNumber) {
      var img = document.getElementById(action+"_newIcon"+actionNumber);
      
      if (browseImg(img) == false)
        return; // no image choosen: keep current
      
      var newSrc = img.src;
      removeCustomIconFile(action, actionNumber);
      
      // copy icon file to chrome folder newIcon
      var file = Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsILocalFile);
      file.initWithPath(newSrc);
      
      var fileLocator = Components.classes["@mozilla.org/file/directory_service;1"].getService(Components.interfaces.nsIProperties);
      var userProfilePath = fileLocator.get("ProfD", Components.interfaces.nsIFile).path;
      var dest = Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsILocalFile);
      dest.initWithPath(userProfilePath);
      dest.append("extensions");
      dest.append("{11F9F076-72B3-4586-995D-5042CF5D3AD4}");
      dest.append("chrome");
      dest.append("customicons");
      
      file.copyTo(dest, action+actionNumber);
      
      img.src="chrome://customicons/content/"+action + actionNumber;
      
      //var chrome=Components.classes["@mozilla.org/chrome/chrome-registry;1"].createInstance(Components.interfaces.nsIChromeRegistry);
      //chrome.checkForNewChrome();
      /*
      try {	// clear xul cache by deleting xul.mlf file
        var faslService = Components.classes['@mozilla.org/fast-load-service;1'].getService(Components.interfaces.nsIFastLoadService);
        var faslFile = faslService.newFastLoadFile("XUL");
        faslFile.remove(false);
      } catch (ex) {}
      */
    }
    
    function removeCustomIconFile(action, actionNumber) {
      var fileLocator = Components.classes["@mozilla.org/file/directory_service;1"].getService(Components.interfaces.nsIProperties);
      var userProfilePath = fileLocator.get("ProfD", Components.interfaces.nsIFile).path;
      
      var file = Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsILocalFile);
      file.initWithPath(userProfilePath);
      file.append("extensions");
      file.append("{11F9F076-72B3-4586-995D-5042CF5D3AD4}");
      file.append("chrome");
      file.append("customicons");
      file.append(action+actionNumber);
      
      if (file.exists())
        file.remove(false);
      document.getElementById(action+"_newIcon"+actionNumber).src = "";
    }
    
    function preventCloseOnEnter(event) {
      if (event.keyCode == 13 && event.target.nodeName == "textbox") {
        if (!event.target.hasAttribute("multiline")) {
          event.preventDefault();
          event.target.parentNode.focus();
        }
      }
    }
    
    function createActionsPopupList() {
      var popupNode = document.createElement("menupopup");
      popupNode.setAttribute("maxheight", "500px");
      
      for (var i=0; i<eG_PopupLabels.length; i++) {
        if (i==1 || i==2 || i==14 || i==21 || i==27 || i==37 || i==71 || i==85) {
          var itemNode = document.createElement("menuseparator");
          popupNode.appendChild(itemNode);
        }
        
        var itemNode = document.createElement("menuitem");
        var imageNode = document.createElement("image");
        var subItemNode = document.createElement("label");
        
        itemNode.appendChild(imageNode);
        itemNode.appendChild(subItemNode);
        
        itemNode.setAttribute("onclick", "actionClick(this," + i + "); updateUI();");
        itemNode.setAttribute("crop", "end");
        itemNode.setAttribute("label", eG_PopupLabels[i]);
        itemNode.style.paddingRight = "20px";
        
        imageNode.style.listStyleImage = "url('" + eG_skinCurrent + "small_actions.png')";
        imageNode.setAttribute("class", "small_" + eG_PopupImages[i]);
        
        subItemNode.setAttribute("value", eG_PopupLabels[i]);
        popupNode.appendChild(itemNode);
      }
      
      return popupNode;
    }
    
    function actionClick(item, actionNumber) {
      item.parentNode.parentNode.setAttribute("actionID", actionNumber);
      if (actionNumber == 0) {
        item.parentNode.parentNode.setAttribute("label", "");
      }
      
      if (item.firstChild.getAttribute("class").search("loadURLScript") != -1) {
        var n = item.firstChild.getAttribute("class").replace(/([^0-9])+/g,"");
        item.parentNode.parentNode.setAttribute("label", document.getElementById("loadURLScript_name"+n).value);
      }
      
      if (item.firstChild.getAttribute("class").search("runProgramFile") != -1) {
        var n = item.firstChild.getAttribute("class").replace(/([^0-9])+/g,"");
        item.parentNode.parentNode.setAttribute("label", document.getElementById("runProgramFile_name"+n).value);
      }
    }
    
    function attachMenupopup(menulist) {
      if (menulist.firstChild != null) {
        return;
      }

      var clonedMenupopup = eG_actionsPopupList.cloneNode(true);
      menulist.appendChild(clonedMenupopup);
      clonedMenupopup.boxObject.firstChild.setAttribute("style", "overflow-x:hidden;"); // boxObject does not exist before menupopup is shown
      
      if (clonedMenupopup.parentNode.id.search("Sector0") == -1) {
        // remove more action
        clonedMenupopup.removeChild(clonedMenupopup.childNodes[1]);
        clonedMenupopup.removeChild(clonedMenupopup.childNodes[1]);
      }
    }
    
    function resetStats() {
      // all stats to 0
      eG_prefs.setIntPref("profile.statsClicks", 0); // total clicks in whole window
      eG_prefs.setIntPref("profile.statsUse", 0); // clicks within Pie Menu
      var d = new Date(); // date of last reset
      eG_prefs.setCharPref("profile.statsLastReset", d.getFullYear() + "/" + (d.getMonth()+1) + "/"+d.getDate()+"  "+ d.getHours()+":"+(d.getMinutes()<10? "0":"")+d.getMinutes()+":"+(d.getSeconds()<10? "0":"")+d.getSeconds() );
      eG_prefs.setCharPref("profile.statsMain", "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]"); // saved as source of an Array
      eG_prefs.setCharPref("profile.statsExtra", "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]"); // saved as source of an Array
      var actionsStr = new Array();
      for (i=0; i<eG_PopupImages.length ; i++)
        actionsStr.push(0); // all actions stats set to 0
      eG_prefs.setCharPref("profile.statsActions", actionsStr.toSource()); // saved as source of an Array
    }
    
    function browseImg(img) {
      var fp = Components.classes["@mozilla.org/filepicker;1"].createInstance(Components.interfaces.nsIFilePicker);
      fp.init(window, 'Icon File', Components.interfaces.nsIFilePicker.modeOpen);
      fp.appendFilter("Image Files", "*.png;*.jpg;*.bmp;*.gif;*.ico;*.mng;*.xbm;*.jpeg;*.xpm;*.dib;*.jif;*.jiff;*.jpe");
      fp.appendFilters(Components.interfaces.nsIFilePicker.filterAll);
      //fp.appendFilters(Components.interfaces.nsIFilePicker.filterImages);
      
      var ret = fp.show();
      if (ret == Components.interfaces.nsIFilePicker.returnOK) {
        img.src = fp.file.path;
        return true;
      }
      else
        return false;
    }
    
    function browse(textboxid) {
      var fp = Components.classes["@mozilla.org/filepicker;1"].createInstance(Components.interfaces.nsIFilePicker);
      fp.init(window, 'easyGestures', Components.interfaces.nsIFilePicker.modeOpen);
      //fp.appendFilter("Applications(*.exe,*.bat)","*.exe;*.bat");
      fp.appendFilters(Components.interfaces.nsIFilePicker.filterAll);
      
      var ret = fp.show();
      if (ret == Components.interfaces.nsIFilePicker.returnOK) {
        var textbox = document.getElementById(textboxid);
        textbox.value = fp.file.path;
      }
    }
    
    function exportPrefs() {
      var fp = Components.classes["@mozilla.org/filepicker;1"].createInstance(Components.interfaces.nsIFilePicker);
      fp.init(window, 'easyGestures', Components.interfaces.nsIFilePicker.modeSave);
      fp.appendFilter("Preferences (*.ege)","*.ege");
      var ret = fp.show();
      if (ret == Components.interfaces.nsIFilePicker.returnOK || ret == Components.interfaces.nsIFilePicker.returnReplace ) {
        //create file
        var file = Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsILocalFile);
        var filePath = fp.file.path;
        if (filePath.substring(filePath.length-4,filePath.length)!=".ege")
          filePath = filePath + ".ege";
        file.initWithPath(filePath);
        if (file.exists() == false) {
          file.create(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, 420);
        }
        
        //write to file
        var outputStream = Components.classes[ "@mozilla.org/network/file-output-stream;1" ].createInstance(Components.interfaces.nsIFileOutputStream);
        outputStream.init(file, 0x04 | 0x08, 420, 0);
        
        var converterOutputStream = Components.classes["@mozilla.org/intl/converter-output-stream;1"].createInstance(Components.interfaces.nsIConverterOutputStream);
        converterOutputStream.init(outputStream, "UTF-8", 0, 0x0000);
        
        var prefCount = {value:0};
        var prefArray = eG_prefs.getChildList("", prefCount);
        if (!prefArray || (prefCount.value <= 0)) {
          alert("Export aborted !");
          converterOutputStream.close();
          outputStream.close();
          return;
        }
        
        // add description at the begining of the file
        var d = new Date();
        var dateStr = d.getFullYear() + "/" + (d.getMonth()+1) + "/"+d.getDate()+" "+ d.getHours()+":"+(d.getMinutes()<10? "0":"")+d.getMinutes()+":"+(d.getSeconds()<10? "0":"")+d.getSeconds();
        converterOutputStream.writeString( "//eG "+ eG_getVersion()+" ("+dateStr+")//\n");
        
        for(i=0; i<prefArray.length; i++) {
          //if (prefArray[i].search("version")!=-1) continue; // don't export version number preference
          if (prefArray[i].search("stateChange") != -1)
            continue; // don't export stateChange preferences
          
          converterOutputStream.writeString( prefArray[i]+"\n"); // write pref name
          
          switch(eG_prefs.getPrefType(prefArray[i])) {
            case Components.interfaces.nsIPrefBranch.PREF_STRING:
              converterOutputStream.writeString(Components.interfaces.nsIPrefBranch.PREF_STRING+"\n"); // write pref type
              converterOutputStream.writeString(eG_prefs.getComplexValue(prefArray[i], Components.interfaces.nsISupportsString).data+"\n"); // write pref value
              break;
            
            case Components.interfaces.nsIPrefBranch.PREF_INT:
              converterOutputStream.writeString(Components.interfaces.nsIPrefBranch.PREF_INT+"\n"); // write pref type
              converterOutputStream.writeString(eG_prefs.getIntPref(prefArray[i])+"\n"); // write pref value
              break;
            
            case Components.interfaces.nsIPrefBranch.PREF_BOOL:
              converterOutputStream.writeString( Components.interfaces.nsIPrefBranch.PREF_BOOL+"\n"); // write pref type
              converterOutputStream.writeString(eG_prefs.getBoolPref(prefArray[i])+"\n"); // write pref value
              break;
          }
        }
        converterOutputStream.close();
        outputStream.close();
      }
    }
    
    function importPrefs() {
      var fp = Components.classes["@mozilla.org/filepicker;1"].createInstance(Components.interfaces.nsIFilePicker);
      fp.init(window, 'easyGestures', Components.interfaces.nsIFilePicker.modeOpen);
      fp.appendFilter("Preferences (*.ege)","*.ege");
      
      var ret = fp.show();
      if (ret == Components.interfaces.nsIFilePicker.returnOK) {
        var file = Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsILocalFile);
        var filePath = fp.file.path;
        if (filePath.substring(filePath.length-4,filePath.length)!=".ege") {
          alert("This type of file can't be imported !");
          return;
        }
        file.initWithPath(filePath);
        
        // read from file
        var inputStream = Components.classes["@mozilla.org/network/file-input-stream;1"].createInstance(Components.interfaces.nsIFileInputStream);
        inputStream.init(file, 0x01, 444, 0);
        
        var converterInputStream = Components.classes["@mozilla.org/intl/converter-input-stream;1"].createInstance(Components.interfaces.nsIConverterInputStream);
        converterInputStream.init(inputStream, "UTF-8", 1024, 0xFFFD);
        
        if (converterInputStream instanceof Components.interfaces.nsIUnicharLineInputStream) {
          var line = {};
          var cont = converterInputStream.readLine(line); // read first line containing description
          do {
            cont = converterInputStream.readLine(line); // read pref name
            var pref = line.value;
            
            cont = converterInputStream.readLine(line); // read pref type
            var type = (new Function ("return " + line.value ))(); // (new Function ("return " + data ))() replacing eval on data
            
            cont = converterInputStream.readLine(line); // read pref value
            var value = Components.classes["@mozilla.org/supports-string;1"].createInstance(Components.interfaces.nsISupportsString);
            value.data = line.value;
            
            try {
              switch (type) {
                case Components.interfaces.nsIPrefBranch.PREF_STRING:
                  eG_prefs.setComplexValue(pref, Components.interfaces.nsISupportsString, value);
                  break;
                
                case Components.interfaces.nsIPrefBranch.PREF_INT:
                  eG_prefs.setIntPref(pref, (new Function ("return " + value.data ))() ); // (new Function ("return " + data ))() replacing eval on data
                  break;
                
                case Components.interfaces.nsIPrefBranch.PREF_BOOL:
                  eG_prefs.setBoolPref(pref, (new Function ("return " + value.data ))() ); // (new Function ("return " + data ))() replacing eval on data
                  break;
              }
            }
            catch (ex) {
              alert("Exception: "+ ex.toString());
              break;
            }
          } while (cont);
        }
        converterInputStream.close();
        inputStream.close();
      }
      eG_updatePrefs(eG_prefs);
    }
    
    function initMenuDialog() {
      window.setCursor('wait');
      
      document.getElementById('version').value = eG_version + eG_getVersion();
      
      eG_actionsPopupList = createActionsPopupList();
      
      createActions();
      createRunProgramFileForCustomization();
      createLoadURLScriptForCustomization();
      
      ["showButton", "showAltButton", "supprKey", "contextKey"].forEach(
        function (element, index, array) {
          var menulist = document.getElementById(element + "Menulist");
          menulist.value = eG_prefs.getIntPref("behavior." + element);
          if (menulist.selectedIndex == -1) {
            menulist.selectedIndex = menulist.itemCount - 1;
          }
          updateLabelAndTextboxFor(menulist);
        });
      
      initActionsBoxes();
      
      for (var i=1; i<=10; i++) {
        // runProgramFile 1 to 10
        var runProgramFile = eG_prefs.getComplexValue("customizations.runProgramFile"+i, Components.interfaces.nsISupportsString).data.split("•");
        document.getElementById("runProgramFile_name"+i).value = runProgramFile[0];
        document.getElementById("runProgramFile_path"+i).value = runProgramFile[1];
        document.getElementById("runProgramFile_arg"+i).value = runProgramFile[2];
        document.getElementById("runProgramFile_newIcon"+i).src = runProgramFile[3];
        document.getElementById("runProgramFile_appIconCheck"+i).checked = (new Function ("return " + runProgramFile[4] ))(); // (new Function ("return " + data ))() replacing eval on data
        document.getElementById("runProgramFile_newIconCheck"+i).checked = (new Function ("return " + runProgramFile[5] ))(); // (new Function ("return " + data ))() replacing eval on data
      }
      
      updateUI();
      window.setCursor('auto');
      
      try {
        // open dialog on appropriate panel when called from tips window
        var args = window.arguments[1].split("/");
        document.getElementById(args[0]+"Tabboxes").selectedIndex = parseInt(args[1])-1; // Page 1 is index 0
      }
      catch (ex) {}
    }
    
    function saveMenuSettings() {
      setActionsPrefs();
      
      var string = Components.classes["@mozilla.org/supports-string;1"].createInstance(Components.interfaces.nsISupportsString);
      
      for (var i=1; i<=10; i++) {
        // runProgramFile 1 to 10
        string.data = document.getElementById("runProgramFile_name"+i).value
          + "•" + document.getElementById("runProgramFile_path"+i).value
          + "•" + document.getElementById("runProgramFile_arg"+i).value
          + "•" + document.getElementById("runProgramFile_newIcon"+i).src
          + "•" + document.getElementById("runProgramFile_appIconCheck"+i).checked
          + "•" + document.getElementById("runProgramFile_newIconCheck"+i).checked;
        eG_prefs.setComplexValue("customizations.runProgramFile"+i, Components.interfaces.nsISupportsString, string);
      }
      
      /////////////////////////////////////////////////////
      // triggering observer to reset eGm object
      /////////////////////////////////////////////////////
      
      try {
        eG_prefs.setBoolPref("stateChange.prefs", !eG_prefs.getBoolPref("stateChange.prefs"));
      }
      catch (ex) {
        eG_prefs.setBoolPref("stateChange.prefs", true);
      }
    }
    
    function readLoadURLScriptPreference(number) {
      var preference = document.getElementById("loadURLScript" + number);
      var string = preference.value.split("•");

      document.getElementById("loadURLScript_name" + number).value = string[0];
      if ((new Function ("return " + string[2] ))()) {
        document.getElementById("loadURLScript_code" + number).value = string[1];
      }
      else {
        document.getElementById("loadURLScript_host" + number).value = string[1];
      }
      document.getElementById("loadURLScript_type" + number).selectedItem =
        document.getElementById( (new Function ("return " + string[2] ))() ?
          "Script" + number
        : "URL" + number);
      document.getElementById("loadURLScript_newIcon" + number).src = string[3];
      document.getElementById("loadURLScript_faviconCheck" + number).checked =
        (new Function ("return " + string[4] ))();
      document.getElementById("loadURLScript_newIconCheck" + number).checked =
        (new Function ("return " + string[5] ))();
    }
    
    function writeLoadURLScriptPreference(number) {
      var string = Components.classes["@mozilla.org/supports-string;1"]
                             .createInstance(Components.interfaces.nsISupportsString);
      string.data = document.getElementById("loadURLScript_name" + number).value
        + "•" + (document.getElementById("URL" + number).selected ?
                  document.getElementById("loadURLScript_host" + number).value
                : document.getElementById("loadURLScript_code" + number).value)
        + "•" + document.getElementById("Script" + number).selected
        + "•" + document.getElementById("loadURLScript_newIcon" + number).src
        + "•" + document.getElementById("loadURLScript_faviconCheck" + number).checked
        + "•" + document.getElementById("loadURLScript_newIconCheck" + number).checked;
      return string;
    }
    
    function setActionsPrefs() {
      // setting actions IDs and labels
      var groupboxes = new Array(
        "main", "mainAlt1", "mainAlt2", "extra", "extraAlt1", "extraAlt2",
        "contextLink", "contextImage", "contextSelection", "contextTextbox"
      );
      
      // setting IDs
      for (var i=0; i<groupboxes.length; i++) {
        var string = "";
        for (var j=0; j<=9; j++) {
          if (groupboxes[i].search("extra")!=-1 && j>=3 && j<=7 )
            string += "0";
          else
            string += document.getElementById(groupboxes[i]+"Sector"+j).getAttribute("actionID");
          string += (j<9?"/":"");
        }
        eG_prefs.setCharPref("actions."+groupboxes[i], string);
      }
    }
    
    function initActionsBoxes() {
      // initializing actions IDs and labels
      var groupboxes = new Array(
        "main", "mainAlt1", "mainAlt2", "extra", "extraAlt1", "extraAlt2",
        "contextLink", "contextImage", "contextSelection", "contextTextbox"
      );
      
      // initializing IDs
      for (var i=0; i<groupboxes.length; i++) {
        var ids = eG_prefs.getCharPref("actions."+groupboxes[i]).split("/");
        for (var j=0; j<=9; j++) {
          if (groupboxes[i].search("extra")!=-1 && j>=3 && j<=7)
            continue;
          else {
            var element = document.getElementById(groupboxes[i]+"Sector"+j);
            element.setAttribute("actionID", ids[j]);
            element.setAttribute("label", eG_PopupLabels[ids[j]]);
          }
        }
      }
    }
    
    function resetOnDuplicatedKeys(menulist, textbox) {
      var contextKeyCode = document.getElementById("customContextKeyCode").value;
      var supprKeyCode = document.getElementById("customSupprKeyCode").value;

      if ((contextKeyCode == supprKeyCode) && contextKeyCode != 0) {
        menulist.value = 0;
        textbox.value = 0;
        alert(eG_duplicateKeyMessage);
      }
    }
    
    function fireChangeEventOnLoadURLScript(number) {
      var element = document.getElementById("gr_loadURLScript" + number);
      fireChangeEventOn(element);
    }
    
    function fireChangeEventOn(element) {
      // firing a change event triggers XUL's preferences system to change the
      // value of the preference
      var event = document.createEvent('Event');
      event.initEvent('change', true, false);
      element.dispatchEvent(event);
    }
    
    function updateOtherLabels(actionID, label) {
      var groupboxes = new Array(
        "main", "mainAlt1", "mainAlt2", "extra", "extraAlt1", "extraAlt2",
        "contextLink", "contextImage", "contextSelection", "contextTextbox"
      );
      
      for (var i=0; i<groupboxes.length; i++) {
        for (var sector=0; sector<10; sector++) {
          if (groupboxes[i].search("extra")!=-1 && sector>2 && sector<8)
            continue;
          
          var element = document.getElementById(groupboxes[i] + "Sector" + sector);
          if (element.getAttribute("actionID") == actionID) {
            element.setAttribute("label", label);
          }
        }
      }
    }
    
    function updateLabelAndTextboxFor(menulist) {
      var label = menulist.nextElementSibling;
      var textbox = label.nextElementSibling;
      var shouldBeDisabled = menulist.selectedIndex != menulist.itemCount - 1;
      
      label.disabled = shouldBeDisabled;
      textbox.disabled = shouldBeDisabled;
      if (shouldBeDisabled) {
        textbox.value = menulist.value;
      }
    }
    
    function updateUI() {
      //***************************************************
      // disabling tooltip sub-options
      //***************************************************
      var checking = document.getElementById("showTooltipsCheckbox").checked;
      document.getElementById("tooltipsDelayLabel").disabled = !checking;
      document.getElementById("tooltipsDelayTextbox").disabled = !checking;
      document.getElementById("tooltipsDelayOmitCheckbox").disabled = !checking;
      
      //***************************************************
      // enabling/disabling alternative boxes
      //***************************************************
      var boxes = new Array("main","extra");
      for (var i=0; i<2; i++) {
        for (var sector=0; sector<10; sector++) {
          if (boxes[i].search("extra")!=-1 && sector>2 && sector<8)
            continue;
          document.getElementById(boxes[i]+"Alt1Sector"+sector).disabled = document.getElementById(boxes[i]+"Alternative1").checked;
          document.getElementById(boxes[i]+"Alt2Sector"+sector).disabled = document.getElementById(boxes[i]+"Alternative2").checked;
        }
      }
      
      //***************************************************
      // checking if menu is standard or large
      //***************************************************
      var menuIsLarge = (document.getElementById("menuType").selectedItem.value == "true");
      
      document.getElementById("mainSector3").hidden = !menuIsLarge;
      document.getElementById("mainSector7").hidden = !menuIsLarge;
      document.getElementById("mainAlt1Sector3").hidden = !menuIsLarge;
      document.getElementById("mainAlt1Sector7").hidden = !menuIsLarge;
      document.getElementById("mainAlt2Sector3").hidden = !menuIsLarge;
      document.getElementById("mainAlt2Sector7").hidden = !menuIsLarge;
      
      document.getElementById("contextLinkSector3").hidden = !menuIsLarge;
      document.getElementById("contextLinkSector7").hidden = !menuIsLarge;
      document.getElementById("contextImageSector3").hidden = !menuIsLarge;
      document.getElementById("contextImageSector7").hidden = !menuIsLarge;
      document.getElementById("contextSelectionSector3").hidden = !menuIsLarge;
      document.getElementById("contextSelectionSector7").hidden = !menuIsLarge;
      document.getElementById("contextTextboxSector3").hidden = !menuIsLarge;
      document.getElementById("contextTextboxSector7").hidden = !menuIsLarge;
      
      //***************************************************
      
      document.getElementById("showAfterDelayDelayLabel").disabled = !document.getElementById("showAfterDelayCheckbox").checked;
      document.getElementById("showAfterDelayDelayTextbox").disabled = !document.getElementById("showAfterDelayCheckbox").checked;
      
      //***************************************************
      // display or not dragging sub-option
      //***************************************************
      
      var checking = (document.getElementById("showButtonMenulist").selectedIndex == 0)
                     && document.getElementById("dragOnlyCheckbox").checked;
      document.getElementById("dragOnlyUpLeftBlank").disabled = !checking;
      document.getElementById("dragOnlyUpLeftCheckbox").disabled = !checking;
      
      //***************************************************
      // disabling autoscrolling sub-options
      //***************************************************
      
      var checking = document.getElementById("autoscrollingOnCheckbox").checked;
      document.getElementById("autoscrollingDelayLabel").disabled = !checking;
      document.getElementById("autoscrollingDelayTextbox").disabled = !checking;
      
      //***************************************************
      // displaying correct label for Load URL/Script
      //***************************************************
      
      setLabels();
      
      //***************************************************
      // displaying correct textarea for Load URL/Script
      //***************************************************
      
      for (i=1; i<=20; i++) { // loadURLScript 1 to 20
        var collapse = ((document.getElementById('loadURLScript_type'+i).selectedItem == document.getElementById('URL'+i) ) ? true:false);
        document.getElementById('loadURLScript_code'+i).collapsed = collapse;
        document.getElementById('loadURLScript_host'+i).collapsed = !collapse;
      }
      
      //***************************************************
      // Hiding/unhidding favicon check box for loadURLScript actions
      //***************************************************
      
      for (i=1; i<=20; i++) { // loadURLScript 1 to 20
        var  checkbox = document.getElementById('loadURLScript_faviconCheck'+i);
        if (document.getElementById('Script'+i).selected) {
          checkbox.checked = false;
          checkbox.collapsed = true;
        }
        else
          checkbox.collapsed = false;
      }
      
      //***************************************************
      // Hiding New Icon
      //***************************************************
      
      for (i=1; i<=20; i++) { // loadURLScript 1 to 20
        document.getElementById('loadURLScriptDisplay'+i).collapsed = !document.getElementById('loadURLScript_faviconCheck'+i).checked && !document.getElementById('loadURLScript_newIconCheck'+i).checked;
      }
      for (i=1; i<=10; i++) { // runProgramFile 1 to 10
        document.getElementById('runProgramFileDisplay'+i).collapsed = !document.getElementById('runProgramFile_appIconCheck'+i).checked && !document.getElementById('runProgramFile_newIconCheck'+i).checked;
      }
      
      //***************************************************
      // Setting a few images in Customizations Panel
      //***************************************************
      
      document.getElementById("openLinkImage").style.listStyleImage = "url('"+eG_skinCurrent+"small_actions.png')";
      document.getElementById("closeTabImage").style.listStyleImage = "url('"+eG_skinCurrent+"small_actions.png')";
    }
    
    function eG_getVersion() {
      // Since FF4, replaced the old call to nsIExtensionManager: this works using processNextEvent but is not very clean
      Components.utils.import("resource://gre/modules/AddonManager.jsm");
      var version = null;
      AddonManager.getAddonByID("{11F9F076-72B3-4586-995D-5042CF5D3AD4}",function(addon) {version = addon.version});
      var thread = Components.classes["@mozilla.org/thread-manager;1"].getService(Components.interfaces.nsIThreadManager).currentThread;
      while (version == null)
        thread.processNextEvent(true); // sleep until async value is available       
      return version;
    }
    
    function avoidMultipleInstances() {
      var wenum = Components.classes["@mozilla.org/appshell/window-mediator;1"].getService(Components.interfaces.nsIWindowMediator).getEnumerator("");
      
      while (wenum.hasMoreElements()) {
        var win = wenum.getNext();
        if (win.location == "chrome://easygestures/content/options.xul" && win != this) {
          win.focus();
          try {
            // switch dialog to appropriate panel when called from tips window
            var args = this.arguments[1].split("/");
            win.document.getElementById('eG_optionsWindow').showPane(win.document.getElementById(args[0]+'Pane'));
            win.document.getElementById(args[0]+"Tabboxes").selectedIndex=parseInt(args[1])-1; // Page 1 is index 0
          }
          catch (ex) {}
          
          this.close();
          return;
        }
      }
    }
    
    function showStatusbarIcon(collapse) {
      var wenum = Components.classes["@mozilla.org/appshell/window-mediator;1"].getService(Components.interfaces.nsIWindowMediator).getEnumerator("");
      
      while (wenum.hasMoreElements()) {
        var win = wenum.getNext();
        try {
          node = win.document.getElementById("statusbarIcon");
          node.collapsed = collapse;
        } catch (ex) {}
      }
    }
    //]]>
  </script>
</prefwindow>
